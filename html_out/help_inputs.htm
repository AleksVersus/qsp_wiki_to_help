<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//RU">
<html lang="ru">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>Ввод текста игроком [Документация QSP]</title>
<link href="default.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div class="page group">
<!-- wikipage start -->
<!-- TOC START -->

<!-- TOC END -->
<p>
<a class="wikilink1" href="help_html.htm" title="help:html">Назад: HTML</a>
</p>
<h1 class="sectionedit1" id="vvod_teksta_igrokom">Ввод текста игроком</h1>
<div class="level1">
<p>
Ввод текста игроком можно сделать двумя способами: использовать строку ввода текста, либо диалоговое окно для ввода.
</p>
<p>
Рекомендуется использовать диалоговое окно, кроме тех случаев, в которых требуется вводить текст много раз подряд, например, при реализации парсерной игры - в таких случаях рекомендуется использовать строку ввода.
</p>
</div>
<h2 class="sectionedit2" id="operatory_i_funkcii_dlja_raboty_so_strokoj_vvoda">Операторы и функции для работы со строкой ввода</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> <code id="statement_SHOWINPUT">SHOWINPUT</code> — данный оператор управляет отображением строки ввода на экране. Общая запись: <pre class="brush: qsp">
SHOWINPUT [#выражение]
</pre> , где <code>[#выражение]</code> — это число. Обычно используются значения 0 и 1. Если значение выражения <code>[#выражение]</code> отлично от нуля, строка ввода отображается. Если значение выражения <code>[#выражение]</code> равно нулю, строка ввода скрыта. Примеры: <pre class="brush: qsp">
showinput 1 &amp; ! показывает строку ввода
showinput 0 &amp; ! скрывает строку ввода
</pre> Для удобства чтения кода можно заранее определить переменные <code>on</code> и <code>off</code> и использовать их: <pre class="brush: qsp">
on, off = 1, 0
showinput on &amp; ! показывает строку ввода
showinput off &amp; ! скрывает строку ввода
</pre></div>
</li>
<li class="level1"><div class="li"> <code id="statement_CMDCLEAR">CMDCLEAR</code> — оператор очистки строки ввода. Имеет краткую форму <code>CMDCLR</code>. Удаляет весь текст из строки ввода. <pre class="brush: qsp">
cmdclear
</pre></div>
</li>
<li class="level1"><div class="li"> <code id="func_USER_TEXT">$USER_TEXT</code> — данная функция в ЛЮБОМ месте игры возвращает текст, который находится в строке ввода (поле ввода). Имеет краткую форму <code>$USRTXT</code>. Пример использования совместно с обработчиком строки ввода можно посмотреть в разделе <a class="wikilink1" href="help_service_locations.htm" title="help:service_locations">"Служебные локации"</a>. Пример действия, по нажатию на которое в окно дополнительного описания будет выводиться текст, введённый в строку ввода: <pre class="brush: qsp">
act "Что я написал?": pl 'Я написал: "&lt;&lt;$user_text&gt;&gt;".'
</pre></div>
</li>
</ul>
</div>
<h2 class="sectionedit3" id="dialogovoe_okno">Диалоговое окно</h2>
<div class="level2">
<p>
<code id="func_INPUT">$INPUT</code> — данная функция выводит на экран диалоговое окно с указанным текстом, а затем возвращает интерпретатору введённый игроком текст, либо <code>""</code> (пустая строка), если была нажата кнопка "<strong>Отмена</strong>". Общая запись:
</p>
<p>
</p><pre class="brush: qsp">
$INPUT([$текст])
</pre>
<p>
, где <code>[$текст]</code> — это приглашение в диалоговом окне, которое видит игрок. Например:
</p>
<p>
</p><pre class="brush: qsp">
$name = $input('Как звать тебя, герой?')
</pre>
<p>
При выполнении данной команды на экране появится диалоговое окно с текстом "Как звать тебя, герой?", а выполнение остального кода приостановится, пока игрок не провзаимодействует с диалоговым окном.
</p>
<p>
Игрок может ввести или не ввести текст, и нажать кнопки "<strong>ОК</strong>" или "<strong>Отмена</strong>". Если игрок ввёл текст и нажал кнопку "<strong>ОК</strong>", функция <code>$INPUT</code> вернёт переменной <code>$name</code> введённый игроком текст. Во всех остальных случаях после закрытия диалогового окна функция вернёт пустую строку (<code>""</code>).
</p>
<p>
Другие примеры:
</p>
<p>
</p><pre class="brush: qsp">
! Вопрос с одним правильным ответом. 
if $input('Что приходит после тьмы?')='свет':
  msg 'Все верно.'
else
  msg 'Ответ не верный.'
end

! Пример реализации вопроса с несколькими вариантами ответа из которых любой будет правильным.
$answer=$trim($lcase($input('Ответить')))
if instr($answer,'красный') or instr($answer,'желтый') or instr($answer,'зеленый'): gt 'win'
! Введя красный или зеленый ил желтый произойдет переход на локацию 'win'
</pre>
<p>
Допустимо, но не одобряется, использовать функцию для возвращения числовых значений:
</p>
<p>
</p><pre class="brush: qsp">
INPUT([$приглашение])
</pre>
<p>
Это может привести к различным ошибкам в игре, если игрок введёт в диалоговом окне не только цифры. Например:
</p>
<p>
</p><pre class="brush: qsp">
age=input('Сколько вам лет?')
</pre>
<p>
Если игрок введёт вместо числа строку "<code>24 года</code>", плеер выдаст ошибку <strong>101 "Несоответствие типов данных"</strong>. Подобные ситуации должен предусматривать автор игры, а значит правильно будет озаботиться проверкой введённого значения уже после того, как функция <code>$INPUT</code> будет выполнена.
</p>
<p>
</p><pre class="brush: qsp">
:enter_text
! предлагаем игроку ответить на вопрос
! и присваиваем введённый текст переменной:
$text=$input('Сколько вам лет?')
! если во введённом тексте содержатся не только
!  цифры, либо игрок не ввёл ответ:
if $text="" or no isnum($text):
    ! предлагаем игроку снова ответить на вопрос:
    jump 'enter_text'
else
    age=val($text)
end
</pre>
<p>
<a class="wikilink1" href="help_modules.htm" title="help:modules">Вперёд: Работа с файлами игр, использование модулей</a>
</p>
</div>

<!-- wikipage stop -->
</div></body>
</html>