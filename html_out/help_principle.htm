<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//RU">
<html lang="ru">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>Порядок работы интерпретатора [Документация QSP]</title>
<link href="default.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div class="page group">
<!-- wikipage start -->
<!-- TOC START -->

<!-- TOC END -->
<p>
<a class="wikilink1" href="help_objs.htm" title="help:objs">Назад: Предметы</a>
</p>
<h1 class="sectionedit1" id="porjadok_raboty_interpretatora">Порядок работы интерпретатора</h1>
<div class="level1">
<p>
<strong>Несмотря на то, что эта статья обросла некоторыми подробностями, она всё ещё требует серьёзной редактуры, упрощения и расширения. Так что пока что это всё ещё черновой вариант.</strong>
</p>
<p>
Эта статья подробно рассказывает о порядке работы интерпретатора (плеера) <strong>QSP</strong>. Она может показаться вам довольно сложной, но читать её всю не обязательно. Вернитесь к ней, когда у вас возникнут сложности в понимании того, как ведёт себя плеер. А пока достаточно ознакомиться с общими принципами:
</p>
<ul>
<li class="level1"><div class="li"> При запуске игры автоматически воспроизводится только самая первая в игре локация. На остальные локации нужно осуществлять переходы с помощью <strong><code>GOTO</code></strong> или <strong><code>XGOTO</code></strong>, или вызывать их с помощью <strong><code>GOSUB</code></strong>, <strong><code>FUNC</code></strong>, или иным предусмотренным плеером способом.</div>
</li>
<li class="level1"><div class="li"> Код действий "прикрепляется" к действию и не выполняется, пока игрок не нажмёт на действие.</div>
</li>
<li class="level1"><div class="li"> Все команды выполняются последовательно одна за другой, и никогда не выполняются одновременно.</div>
</li>
</ul>
<p>
Ниже по тексту будут использоваться следующие определения:
</p>
<ul>
<li class="level1"><div class="li"> <strong>Переход на локацию</strong> — это событие в игре, которое происходит при обращении к локации с помощью операторов <strong><code>GOTO</code></strong> или <strong><code>XGOTO</code></strong>. При этом локация становится "активной", или "текущей". Функция <strong><code>$CURLOC</code></strong> возвращает название локации, на которую был совершён переход, а массив <strong><code>ARGS[]</code></strong> этой локации сохраняет свои значения, пока снова не будет осуществлён переход на локацию (другую, или ту же самую). После добавления текста из поля "Базовое описание" в Окно основного описания, действий из поля "<strong>Базовые действия</strong>" в <strong>Окно действий</strong>, и выполнения кода из поля "<strong>Выполнить при посещении</strong>", плеер "останавливается" и ожидает участия игрока, при этом локация, на которую был осуществлён переход, остаётся "активной" ("текущей"), т.е. функция <strong><code>$CURLOC</code></strong> в любой момент может вернуть название этой локации, а массив <code>ARGS[]</code> сохраняет значения.<br/>
Для переходов существуют только два оператора (подробнее см. статью <a class="wikilink1" href="help_goto.htm" title="help:goto">"Переходы"</a>):</div>
<ul>
<li class="level2"><div class="li"> <strong><code>GOTO</code></strong> — осуществляет переход на указанную локацию с автоматической очисткой <strong>Окна основного описания</strong> и <strong>Окна действий</strong>.</div>
</li>
<li class="level2"><div class="li"> <strong><code>XGOTO</code></strong> — осуществляет переход на указанную локацию с автоматической очисткой <strong>Окна действий</strong>. <strong>Окно основного описания</strong> НЕ очищается.</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <strong>Вызов локации</strong> — это событие в игре, которое происходит при обращении к локации с помощью оператора <strong><code>GOSUB</code></strong>, функции <strong><code>FUNC</code></strong>, или в связи с выполнением другого события (например, "<strong>Выделение предмета</strong>", "<strong>Загрузка сохранения</strong>", "<strong>Ввод в поле ввода</strong>", "<strong>Выбор пункта меню</strong>"). В отличие от <strong>перехода на локацию</strong>, при <strong>вызове</strong> локация не становится "активной" ("текущей"), т.е. функция <strong><code>$CURLOC</code></strong> не возвращает название этой локации, а массив <strong><code>ARGS[]</code></strong> сохраняет свои значения только пока выполняется код локации. После выполнения кода локации, продолжается выполнение того блока кода, который выполнялся до вызова. Например, если локация была <strong>вызвана</strong> из действия, то после выполнения её кода, продолжится выполнение кода действия, при этом в массив <strong><code>ARGS[]</code></strong> внутри действия не попадут значения массива <strong><code>ARGS[]</code></strong> из вызванной локации. При вызове локации в <strong>Окно основного описания</strong> добавляется текст из поля "<strong>Базовое описание</strong>" локации, в <strong>Окно действий</strong> добавляются действия из поля "<strong>Базовые действия</strong>" локации, и выполняется код из поля "<strong>Выполнить при посещении</strong>" локации. Очистка окон при вызове локации НЕ ПРОИСХОДИТ. <pre class="brush: qsp">
act "Действие с вызовом локации":
  *pl "Выводим текст до вызова"
  gosub 'foo' &amp; ! вызываем локацию foo
  *pl "Продолжаем выполнять код после вызова локации foo"
end
</pre> Вызвать локацию можно разными способами:</div>
<ul>
<li class="level2"><div class="li"> Оператор <strong><code>GOSUB</code></strong> вызывает локацию без возвращения результата (подробнее в статье <a class="wikilink1" href="help_organizing.htm" title="help:organizing">"Пользовательские функции и процедуры"</a>).</div>
</li>
<li class="level2"><div class="li"> Оператор <strong>FUNC</strong> вызывает локацию с возвращением результата (подробнее в статье <a class="wikilink1" href="help_organizing.htm" title="help:organizing">"Пользовательские функции и процедуры"</a>).</div>
</li>
<li class="level2"><div class="li"> Нажатием пункта всплывающего меню (см. статью <a class="wikilink1" href="help_menu.htm" title="help:menu">"Всплывающее меню"</a>)</div>
</li>
<li class="level2"><div class="li"> Выполнением какого-либо события в игре, как то: "Выделение предмета", "Выделение действия", "Загрузка сохранения", "Ввод текста в поле ввода" и т.д. (подробнее в статье <a class="wikilink1" href="help_service_locations.htm" title="help:service_locations">"Служебные локации"</a>).</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <strong>Блок кода</strong> — это выделенный в отдельное целое фрагмент кода игры. Отдельными блоками кода в <strong>QSP</strong> являются:</div>
<ul>
<li class="level2"><div class="li"> Локации сами со себе.</div>
</li>
<li class="level2"><div class="li"> Код, передаваемый оператору <strong><code>DYNAMIC</code></strong> или функции <strong><code>DYNEVAL</code></strong> в виде текста.</div>
</li>
<li class="level2"><div class="li"> Код, выполняемый при нажатии на гиперссылку.</div>
</li>
<li class="level2"><div class="li"> Код каждого отдельного Действия (<strong><a class="wikilink1" href="help_acts.htm" title="help:acts">ACT</a></strong>).</div>
</li>
<li class="level2"><div class="li"> Код каждого отдельного Цикла (<strong><a class="wikilink1" href="help_cycle.htm" title="help:cycle">LOOP</a></strong>)</div>
</li>
</ul>
</li>
</ul>
</div>
<h2 class="sectionedit2" id="zapusk_igry">Запуск игры</h2>
<div class="level2">
<p>
Каждая игра на <strong>QSP</strong> структурно представляет собой набор локаций, последовательно записанных в файл.
</p>
<p>
Когда мы открываем игру в плеере (интерпретаторе), автоматически запускается чтение самой первой локации в файле (далее <strong>Стартовая локация</strong>), как если бы на неё был совершён переход с помощью оператора <strong><code>GOTO</code></strong>. То есть:
</p>
<ul>
<li class="level1"><div class="li"> В Окно основного описания добавляется текст из поля "<strong>Базовое описание</strong>" локации (поле "<strong>Описание</strong>" в <strong>Quest Generator</strong>).</div>
</li>
<li class="level1"><div class="li"> В Окно действий добавляются действия из поля "<strong>Базовые действия</strong>" локации (поле "<strong>Базовые действия</strong>" в <strong>Quest Generator</strong>).</div>
</li>
<li class="level1"><div class="li"> Выполняется код из поля "<strong>Выполнить при посещении</strong>" локации.</div>
</li>
<li class="level1"><div class="li"> Если на Стартовой локации в переменную <strong><code>$ONNEWLOC</code></strong> было помещено название локации-обработчика события "<strong>Переход на новую локацию</strong>", произойдёт автоматический вызов этой самой локации-обработчика события "<strong>Переход на новую локацию</strong>" (см. <a class="wikilink1" href="help_service_locations.htm" title="help:service_locations">"Служебные локации"</a>).</div>
</li>
<li class="level1"><div class="li"> После того, как Стартовая локация была прочитана, плеер "останавливается" и ожидает действий от игрока. При этом локация остаётся "активной", т.е. функция <strong><code>$CURLOC</code></strong> в любой момент может вернуть её название, а в массиве <strong><code>ARGS[]</code></strong> данной локации сохраняются значения, которые на ней были выставлены, и эти значения могут использоваться, например, в действиях, выведенных в <strong>Окно действий</strong>.</div>
</li>
</ul>
<p>
Если на Стартовой локации в переменную <strong><code>$COUNTER</code></strong> было помещено название локации-счётчика, примерно через равные промежутки времени (по умолчанию раз в пол секунды) плеер будет вызывать локацию-счётчик (см. <a class="wikilink1" href="help_service_locations.htm" title="help:service_locations">"Служебные локации"</a>).
</p>
</div>
<h2 class="sectionedit3" id="vypolnenie_koda">Выполнение кода</h2>
<div class="level2">
<p>
Код в <strong>QSP</strong> всегда выполняется последовательно, команда за командой. Чтение команд происходит сверху вниз и справа налево:
</p>
<p>
</p><pre class="brush: qsp">
*pl "Первая команда"
*pl "Вторая команда"
*pl "Третья команда"

*pl "Четвёртая команда" &amp; *pl "Пятая команда" &amp; *pl "Шестая команда"
</pre>
<p>
<strong>QSP</strong> не способен выполнить две команды одновременно, или случайно выполнить вторую команду раньше первой. Поэтому в большинстве случаев, если вам кажется, что плеер "забывает" выполнить какую-либо команду, скорее всего эта команда написана в таком месте, где плеер просто не может до неё добраться.
</p>
<p>
Например, если написано невыполнимое условие, команда никогда не будет выполнена:
</p>
<p>
</p><pre class="brush: qsp">
if 5&gt;6:
  *pl "Данная команда никогда не будет выполнена"
end
</pre>
<p>
Команды, стоящие после <strong><code>GOTO</code></strong> или <strong><code>XGOTO</code></strong>, так же никогда не будут выполнены:
</p>
<p>
</p><pre class="brush: qsp">
*pl "Текст на локации" &amp; ! этот текст будет виден на локации всегда
act "Переход по XGOTO":
  *pl "Этот текст виден благодаря тому, что вы перешли с помощью XGOTO"
  xgoto $curloc &amp; ! переходим на текущую локацию
  *pl "А эта команда никогда не будет выполнена"
end

act "Переход по GOTO":
  *pl "Эта команда будет выполнена"
  ! но при переходе по GOTO Окно основного описания очистится,
  ! так что эту строчку вы всё равно не увидите.
  goto $curloc &amp; ! переходим на текущую локацию
  *pl "А эта команда никогда не будет выполнена"
end
</pre>
<p>
Код действий (<strong><code>ACT</code></strong>) не выполняется сразу, а "прикрепляется" к этим действиям. Он будет выполнен только тогда, когда игрок нажмёт на соответствующее действие.
</p>
<p>
</p><pre class="brush: qsp">
example=12 &amp; ! присваиваем переменной число 12
! создаём действие
act "Вывести значение переменной example":
  *pl example
end
example=37 &amp; ! меняем значение в переменной
</pre>
<p>
То же самое происходит с кодом в гиперссылках. Он не выполняется сразу, когда мы создаём гиперссылку, он выполняется только тогда, когда мы на гиперссылку нажимаем:
</p>
<p>
</p><pre class="brush: qsp">
usehtml=1 &amp; ! включаем режим распознавание HTML
example=12
! выводим на экран гиперссылку с кодом
*pl "&lt;a href='EXEC:*pl example'&gt;Вывести значение переменной example&lt;/a&gt;"
example=37
</pre>
<p>
При выполнении команды, которая содержит строки с вложенными выражениями, сначала раскрываются вложенные выражения, и только затем происходит работа со строкой, например, передача её оператору для вывода на экран:
</p>
<p>
</p><pre class="brush: qsp">
яблоки = 23
! Сначала в строку подставится значение,
! потом строка выведется на экран:
*pl "Яблок в кармане: &lt;&lt;яблоки&gt;&gt;."
</pre>
</div>
<h2 class="sectionedit4" id="perexod_na_novuju_lokaciju">Переход на новую локацию</h2>
<div class="level2">
<p>
Переход на новую локацию может осуществляться с помощью двух операторов <strong><code>GOTO</code></strong> и <strong><code>XGOTO</code></strong>. Различие в их работе заключается в следующем:
</p>
<ul>
<li class="level1"><div class="li"> При переходе с помощью оператора <strong><code>GOTO</code></strong> очищаются Окно основного описания и Окно действий.</div>
</li>
<li class="level1"><div class="li"> При переходе с помощью оператора <strong><code>XGOTO</code></strong> очищается только Окно действий. Окно основного описания не очищается.</div>
</li>
</ul>
<p>
В остальном работа этих операторов схожа:
</p>
<ul>
<li class="level1"><div class="li"> В Окно основного описания добавляется текст из поля "Базовое описание" локации (поле "Описание" в <strong>Quest Generator</strong>).</div>
</li>
<li class="level1"><div class="li"> В Окно действий добавляются действия из поля "Базовые действия" локации (поле "Базовые действия" в <strong>Quest Generator</strong>).</div>
</li>
<li class="level1"><div class="li"> Выполняется код из поля "Выполнить при посещении" локации.</div>
</li>
<li class="level1"><div class="li"> Если в переменную <strong><code>$ONNEWLOC</code></strong> было помещено название локации-обработчика события "Переход на новую локацию", произойдёт автоматический вызов этой самой локации-обработчика события "Переход на новую локацию" (см. <a class="wikilink1" href="help_service_locations.htm" title="help:service_locations">"Служебные локации"</a>).</div>
</li>
<li class="level1"><div class="li"> После этого плеер "останавливается" и ожидает действий от игрока. При этом локация остаётся "активной", т.е. функция <strong><code>$CURLOC</code></strong> в любой момент может вернуть её название, а в массиве <strong><code>ARGS[]</code></strong> данной локации сохраняются значения, которые на ней были выставлены, и эти значения могут использоваться, например, в действиях, выведенных в <strong>Окно действий</strong>.</div>
</li>
</ul>
<p>
Если в переменную <strong><code>$COUNTER</code></strong> было помещено название локации-счётчика, примерно через равные промежутки времени (по умолчанию раз в пол секунды) плеер будет вызывать локацию-счётчик (см. <a class="wikilink1" href="help_service_locations.htm" title="help:service_locations">"Служебные локации"</a>).
</p>
<p>
P.S.: "Переход на новую локацию" — это устоявшееся название события. Технически более правильно называть такие переходы просто "Переход на локацию", поскольку мы можем переходить не только на новые, но и на текущую локацию:
</p>
<p>
</p><pre class="brush: qsp">
"Счёт: &lt;&lt;count&gt;&gt;"
act "Обновить":
  count+=1
  goto $curloc &amp; ! перезаходим на текущую локацию
end
</pre>
<p>
Поэтому, столкнувшись с выражением "Переход на новую локацию" помните, что оно может значить в том числе и переход на текущую локацию.
</p>
</div>
<h2 class="sectionedit5" id="vyzov_lokacii">Вызов локации</h2>
<div class="level2">
<p>
Вызов локации может быть выполнен напрямую через оператор <a class="wikilink1" href="help_organizing.htm" title="help:organizing">**GOSUB**</a> или функцию <a class="wikilink1" href="help_organizing.htm" title="help:organizing">**FUNC**</a> или в привязке к какому-либо <a class="wikilink1" href="help_service_locations.htm" title="help:service_locations">событию</a>.
</p>
<p>
При вызове:
</p>
<ul>
<li class="level1"><div class="li"> В Окно основного описания добавляется текст из поля "Базовое описание" локации (поле "Описание" в <strong>Quest Generator</strong>).</div>
</li>
<li class="level1"><div class="li"> В Окно действий добавляются действия из поля "Базовые действия" локации (поле "Базовые действия" в <strong>Quest Generator</strong>).</div>
</li>
<li class="level1"><div class="li"> Выполняется код из поля "Выполнить при посещении" локации.</div>
</li>
</ul>
<p>
Дополнительно, при вызове с помощью оператора <strong><code>GOSUB</code></strong>, или функции <strong><code>FUNC</code></strong>, а так же с помощью оператора <a class="wikilink1" href="help_menu.htm" title="help:menu">**MENU**</a>, осуществляется возврат к тому коду, из которого был осуществлён вызов, и продолжается выполнение этого кода. Например, если локация была вызвана из действия, то произойдёт возврат к выполнению кода действия.
</p>
<p>
</p><pre class="brush: qsp">
act "Действие с вызовом локации":
  *pl "Выводим текст до вызова"
  gosub 'foo' &amp; ! вызываем локацию foo
  *pl "Продолжаем выполнять код после вызова локации foo"
end
</pre>
<p>
Более подробно работа оператора <strong><code>GOSUB</code></strong> и функции <strong><code>FUNC</code></strong> освещена в разделе <a class="wikilink1" href="help_organizing.htm" title="help:organizing">"Пользовтальские функции и процедуры"</a>.
</p>
<p>
О работе оператора <strong><code>MENU</code></strong> более подробно можно почитать в разделе <a class="wikilink1" href="help_menu.htm" title="help:menu">"Меню"</a>.
</p>
</div>
<h2 class="sectionedit6" id="obrabotka_sobytij">Обработка событий</h2>
<div class="level2">
<p>
События, если смотреть на это понятие с точки зрения работы плеера, — это некое изменение состояния в написанной нами игре. Например, у нас все предметы были не выделены, и вот игрок щёлкает мышью по одному из предметов, и предмет оказывается выделен. То есть предмет изменил своё состояние с "не выделен", на "выделен". Это и есть <strong>событие выделения предмета</strong>.
</p>
<p>
Конечно, мы могли бы и сами отслеживать некоторые события, например, с помощью локации-счётчика постоянно проверять, какое значение возвращает нам функция <strong><code>$SELOBJ</code></strong>, и в момент, когда функция изменяет своё значение с одного на другое, мы точно знаем, что произошло выделение нового предмета, или иными словами: событие "Выделение предмета". Однако, для нас это, во-первых, лишний код, а, во-вторых, очень неудобный и неточный инструмент по отслеживанию событий, поскольку локация-счётчик имеет ряд ограничений и на скорость выполнения, и на очерёдность. Мы хотим, чтобы миллисекунда в миллисекунду мы знали, что какое-то событие произошло, и чтобы при этом мы могли выполнить какой-либо код.
</p>
<p>
Именно для этого в <strong>QSP</strong> введены специальные служебные локации: локации-обработчики событий (и локация-счётчик).
</p>
<p>
Любая локация, названная как угодно, и написанная каким угодно образом, может быть назначена обработчиком-события или локацией-счётчиком. Для этого название этой локации нужно прописать в специальную системную переменную. Например:
</p>
<p>
</p><pre class="brush: qsp">
$counter = 'счётчик' &amp; ! назначаем локацию-счётчик
$onobjsel = 'onClick' &amp; ! назначаем локацию-обработчик события "Выделение предмета"
$usercom = 'debugger' &amp; ! назначаем локацию-обработчик события "Нажатие клавиши ввода в Поле ввода"
</pre>
<p>
Как видите, название локации может быть совершенно любым, главное, чтобы она была прописана в нужную системную переменную. И как только это происходит, как только мы прописываем имя локации в нужную переменную, эта локация становится <strong>связана</strong> с указанным событием. Это значит, что как только это событие случится, будет выполнен код на указанной локации.
</p>
<p>
Подробнее о том, какая системная переменная за <strong>связку</strong> с каким событием отвечает, вы можете прочитать в статье <a class="wikilink1" href="help_service_locations.htm" title="help:service_locations">"Служебные локации"</a>.
</p>
<p>
Чтобы отвязать локацию от события, достаточно в нужную системную переменную прописать пустое значение:
</p>
<p>
</p><pre class="brush: qsp">
$counter = '' &amp; ! отключаем локацию-счётчик
$onobjsel = '' &amp; ! отключаем локацию-обработчик события "Выделение предмета"
</pre>
</div>
<h2 class="sectionedit7" id="processy_v_nastojaschem_vremeni">Процессы в настоящем времени</h2>
<div class="level2">
<p>
Если была назначена локация-счётчик, то с приблизительно равной периодичностью будет происходить вызов указанной локации-счётчика. По умолчанию локация-счётчик вызывается 2 раза в секунду, то есть каждые 500 миллисекунд — это значение можно изменять с помощью оператора <strong><code>SETTIMER</code></strong>.
</p>
<p>
</p><pre class="brush: qsp">
settimer 100 &amp; ! устанавливаем период обращения к локации-счётчику в 100 мс
$counter = 'отсчёт_времени' &amp; ! плеер будет вызывать локацию **отсчёт времени** примерно 10 раз в секунду
</pre>
<p>
Так же с заданной периодичностью (по умолчанию 2 раза в секунду) происходит полное обновление интерфейса: шрифт и цвета, заданные с помощью системных переменных.
</p>
<p>
Подробнее о локации-счётчике и создании игровых событий в реальном времени читайте в статье <a class="wikilink1" href="help_realtime.htm" title="help:realtime">"Реальное время"</a>.
</p>
<p>
<a class="wikilink1" href="help_variables.htm" title="help:variables">Вперёд: Переменные</a>
</p>
</div>

<!-- wikipage stop -->
</div></body>
</html>