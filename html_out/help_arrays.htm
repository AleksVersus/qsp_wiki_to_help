<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//RU">
<html lang="ru">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>Массивы [Документация QSP]</title>
<link href="default.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div class="page group">
<!-- wikipage start -->
<!-- TOC START -->

<!-- TOC END -->
<p>
<a class="wikilink1" href="help_coding.htm" title="help:coding">Назад: Программный код</a>
</p>
<h1 class="sectionedit1" id="massivy">Массивы</h1>
<div class="level1">
</div>
<h2 class="sectionedit2" id="zachem_nuzhny_massivy">Зачем нужны массивы</h2>
<div class="level2">
<p>
Иногда нам становится неудобно хранить множество однотипных значений в разных переменных. Например, у нас есть двадцать "одноручных мечей" и для каждого мы прописали урон в двадцати разных переменных:
</p>
<p>
</p><pre class="brush: qsp">
меч_одноручный_1 = 23
меч_одноручный_2 = 34
меч_одноручный_3 = 27
...
меч_одноручный_19 = 7
меч_одноручный_20 = 41
</pre>
<p>
Даже для того, чтобы просто вывести на экран данную характеристику для каждого меча, нам придётся написать двадцать строчек кода, почти ничем не отличающихся:
</p>
<p>
</p><pre class="brush: qsp">
*pl "Меч одноручный №1. Урон: "+$str(меч_одноручный_1)
*pl "Меч одноручный №2. Урон: "+$str(меч_одноручный_2)
*pl "Меч одноручный №3. Урон: "+$str(меч_одноручный_3)
...
*pl "Меч одноручный №19. Урон: "+$str(меч_одноручный_19)
*pl "Меч одноручный №20. Урон: "+$str(меч_одноручный_20)
</pre>
<p>
Всё бы ничего, но что если нам нужно найти среди всех этих переменных ту, которая содержит максимальное число (мы ведь хотим пользоваться самым хорошим мечом)? Тут нам придётся городить огромную конструкцию условий, которая сравнивает каждую переменную со всеми остальными, и объём необходимого нам кода возрастает многократно.
</p>
<p>
Да, есть некоторые варианты решения этих двух задач без использования массивов, но они тоже весьма сложны. Куда как проще работать с однотипными данными, если они представлены в форме массива.
</p>
<p>
Если переменную мы можем вообразить в виде отдельной маленькой коробки, в которую можно положить лишь одно значение, то массив — это большой шкаф, со множеством пронумерованных ящиков (ячеек), в каждый из которых мы можем положить по одному значению.
</p>
</div>
<h2 class="sectionedit3" id="chto_takoe_massivy">Что такое массивы</h2>
<div class="level2">
<p>
<strong>Массив</strong> - в <strong>QSP</strong> это последовательный набор однотипных значений, записанных под одним общим именем. Например, вместо того, чтобы помещать урон каждого одноручного меча в отдельную переменную, мы заводим один массив, и размещаем каждое значение урона в отдельных ячейках этого самого одного единственного массива:
</p>
<p>
</p><pre class="brush: qsp">
меч_одноручный[0] = 23 &amp; ! нумерация ячеек массива начинается с нуля
меч_одноручный[1] = 34
меч_одноручный[2] = 27
...
меч_одноручный[18] = 7
меч_одноручный[19] = 41 &amp; ! значение для двадцатого меча лежит в ячейке под номером 19
</pre>
<p>
Как видно из примера, чтобы записать значение в отдельную ячейку массива, мы должны:
</p>
<ul>
<li class="level1"><div class="li"> написать имя массива</div>
</li>
<li class="level1"><div class="li"> затем без пробелов, не отступая от имени массива, в квадратных скобках написать номер ячейки, в которую хотим поместить значение</div>
</li>
<li class="level1"><div class="li"> затем поставить знак <code><strong>=</strong></code> (операция присваивания)</div>
</li>
<li class="level1"><div class="li"> и уже после знака равно написать нужное значение.</div>
</li>
</ul>
<p>
В нашем примере массив называется "меч_одноручный", а в квадратных скобках мы указываем номера ячеек этого массива.
</p>
</div>
<h3 class="sectionedit4" id="sozdanie_massiva">Создание массива</h3>
<div class="level3">
<p>
Записывая значения хотя бы в одну ячейку массива, мы тем самым <strong>создаём</strong> (инициализируем) весь массив.
</p>
<ul>
<li class="level1"><div class="li"> Ячейки массива так же называются <strong>элементами</strong>.</div>
</li>
<li class="level1"><div class="li"> Каждый массив состоит из множества элементов, и у каждого элемента есть собственный номер.</div>
</li>
<li class="level1"><div class="li"> Номера элементов начинаются с нуля и не повторяются.</div>
</li>
<li class="level1"><div class="li"> Нумерация элементов массива не прерывается. То есть, например, не может в массиве существовать четвёртый элемент, но отсутствовать второй и третий элемент. Если мы создадим только нулевой и первый, а так же четвёртый, элементы массива, второй и третий элементы будут созданы автоматически: <pre class="brush: qsp">
mass[0]=13
mass[1]=19
mass[4]=23
! элементы mass[2] и mass[3] созданы автоматически и хранят значения по умолчанию
</pre></div>
</li>
<li class="level1"><div class="li"> Максимальный возможный номер ячейки массива <code><strong>2147483647</strong></code>.</div>
</li>
<li class="level1"><div class="li"> Минимально возможный номер ячейки массива <code><strong>0</strong></code>. То есть QSP не допускает создания ячеек с отрицательным индексом и не работает с такими ячейками, игнорируя команды присвоения, и возвращая значение по умолчанию при попытке извлечь из такой ячейки значение.</div>
</li>
</ul>
</div>
<h3 class="sectionedit5" id="tipy_dannyx_v_massivax">Типы данных в массивах</h3>
<div class="level3">
<p>
Массив можно представлять себе как список значений. Если вам нужно хранить только одно значение, достаточно обычной переменной, но если вам нужно сохранить множество однотипных значений, как некий список, то обязательно используйте массив. Например, вы можете вести список имён всех встреченных персонажей:
</p>
<p>
</p><pre class="brush: qsp">
$встреченные_неписи[0] = "Домовёнок Нафаня"
$встреченные_неписи[1] = "Девочка Оля"
$встреченные_неписи[2] = "Лариса Петровна"
$встреченные_неписи[3] = "Баба Яга"
</pre>
<p>
В данном примере мы помещали в массив строковые значения. Чтобы поместить в ячейку массива строковое значение, нужно поставить перед именем массива символ <code>$</code> (префикс типа).
</p>
<p>
То же самое и в случае, когда мы хотим получить значение из ячейки массива: если мы хотим получить строковое значение, нужно поставить символ <code>$</code> перед именем массива.
</p>
<p>
И точно так же это работает для числовых значений и кортежей: - Если нам нужно присвоить ячейке массива, или получить из неё, числовое значение, никаких символов мы перед именем массива не ставим (без префикса типа). - Если нам нужно присвоить ячейке массива, или получить из неё, кортеж, ставим символ <code>%</code> перед именем массива (указываем префикс типа).
</p>
<p>
Примеры:
</p>
<p>
</p><pre class="brush: qsp">
$яблоки[0]='антоновка'
$яблоки[1]='белый налив'
$яблоки[2]='астраханское'
$яблоки[3]='ранетка'
$яблоки[4]='симиренко'

сорт_яблока[0] = 1
сорт_яблока[1] = 2
сорт_яблока[2] = 4

%сорта_в_корзине[0] = [1, 4]
%сорта_в_корзине[1] = [2, 4]
%сорта_в_корзине[2] = [1, 2]

*pl $яблоки[сорт_яблока[номер_яблока]]
</pre>
<p>
<strong>В одном массиве</strong> допускается хранить значения любых типов, однако строго рекомендуется хранить в одном массиве только значения одного типа: либо строковые, либо числовые, либо кортежи, — во избежание возможных <a class="wikilink1" href="glossary_bag.htm" title="glossary:bag">багов</a>.
</p>
<p>
<strong>В одной ячейке массива</strong> можно хранить значение только одного типа! Если вы запишете в ячейку, которая хранит строку, числовое значение — это числовое значение "затрёт" строковое. И точно так же со значением любого другого типа.
</p>
</div>
<h3 class="sectionedit6" id="obrabotka_massivov">Обработка массивов</h3>
<div class="level3">
<p>
Преимущество работы с массивами по сравнению с обычными переменными раскрывается тогда, когда нам приходится много раз повторять одну и ту же операцию над однотипными значениями.
</p>
<p>
В примере из начала статьи мы помещали наносимый одноручным мечом урон для двадцати разных мечей в двадцать отдельных переменных и видели, что даже такая простая операция, как вывод значений всех этих переменных на экран требует огромного количества кода. Совсем другое дело, когда мы поместили наши данные в массив, ведь мы можем перебрать весь массив с помощью простого цикла:
</p>
<p>
</p><pre class="brush: qsp">
меч_одноручный[0] = 23 &amp; ! нумерация ячеек массива начинается с нуля
меч_одноручный[1] = 34
меч_одноручный[2] = 27
...
меч_одноручный[18] = 7
меч_одноручный[19] = 41 &amp; ! значение для двадцатого меча лежит в ячейке под номером 19

! выводим на экран список с помощью цикла
loop i=0 while i&lt;20 step i+=1:
  *pl "Меч одноручный №&lt;&lt;i+1&gt;&gt;. Урон: "+$str(меч_одноручный[i])
end
</pre>
<p>
В этом примере для вывода на экран всех значений из всех двадцати ячеек массива нам потребовалось написать всего три строчки кода.
</p>
<p>
А вот как выглядит поиск одноручного меча с наибольшим значением урона:
</p>
<p>
</p><pre class="brush: qsp">
pos = arrpos('меч_одноручный',max('меч_одноручный'))
*pl "Наибольший урон имеет Меч одноручный №&lt;&lt;pos+1&gt;&gt;: "+$str(меч_одноручный[pos])
</pre>
<p>
В обоих этих примерах вместо указания конкретного номера ячейки массива, при получении данных из массива, мы подставляли значение переменной. Именно эта возможность позволяет так легко и быстро обрабатывать множество данных в массивах, и делает работу с ними более удобной, чем с обычными переменными.
</p>
</div>
<h3 class="sectionedit7" id="indeksirovanie_ehlementov_massiva">Индексирование элементов массива</h3>
<div class="level3">
<p>
Выше мы писали, что ячейки массивов нумеруются подряд, начиная с нуля, и нумерация эта не прерывается. Номер ячейки массива называется <strong>числовым индексом ячейки массива</strong>.
</p>
<p>
</p><pre class="brush: qsp">
! ячейки массивов индексируются через числа
$любимый_сорт[3] = $яблоки[2]
любимое_число[19] = 5
$item_loc[0] = 'лес'
</pre>
<p>
<strong>Важно!</strong> Настоятельно не рекомендуется использовать большие числовые индексы без необходимости.
</p>
<p>
<strong>QSP</strong> позволяет создавать для элементов массивов не только числовые, но и строковые индексы. Иными словами массивы могут <em>индексироваться через строки</em>. Примеры:
</p>
<p>
</p><pre class="brush: qsp">
! ячейки массивов индексируются через строки
$любимый_сорт['Иван'] = $яблоки[2]
любимое_число['Алексей'] = 5
$item_loc['палка'] = 'лес'
</pre>
<p>
Регистр символов в строковом индексе массива значения не имеет:
</p>
<p>
</p><pre class="brush: qsp">
$любимый_сорт['иван'] = 'Антоновка'
*pl $любимый_сорт['ИВАН'] &amp; ! выведет строку Антоновка
</pre>
<p>
Есть небольшая хитрость в том, как назначаются строковые индексы ячейкам массивов. Когда вы инициализируете (создаёте, объявляете) новую ячейку массива со строковым индексом, происходит следующее:
</p>
<ul>
<li class="level1"><div class="li"> Плеер создаёт новую ячейку с новым числовым индексом, следующим по порядку. Например, если в массиве уже были созданы три ячейки, создаётся ячейка с числовым индексом <code>3</code>.</div>
</li>
<li class="level1"><div class="li"> Затем плеер "прикрепляет" указанный строковый индекс к числовому.</div>
</li>
</ul>
<p>
Поэтому, если вы создаёте ячейку со строковым индексом, вы можете получать из неё значения в том числе и по числовому индексу:
</p>
<p>
</p><pre class="brush: qsp">
яблоки['у Паши']=37
яблоки['у Даши']=19
яблоки['у Лёши']=11
*pl яблоки[0] &amp; ! выведет на экран число 37
*pl яблоки[1] &amp; ! выведет на экран число 19
*pl яблоки[2] &amp; ! выведет на экран число 11
</pre>
<p>
<strong>Настоятельно рекомендуется</strong> использовать для индексирования или только числовые индексы, или только строковые индексы.
</p>
<p>
Текстовые индексы позволяют обойти ограничение массивов на начало нумерации только с нуля:
</p>
<p>
</p><pre class="brush: qsp">
$item['-2']='Палка'
$item['-1']='Дрель'
$item['0']='Радиоактивный пепел'
</pre>
</div>
<h3 class="sectionedit8" id="mnogomernye_massivy">Многомерные массивы</h3>
<div class="level3">
<p>
В <strong>QSP</strong> есть возможность создавать многомерные массивы, используя для этого специальные индексы:
</p>
<p>
</p><pre class="brush: qsp">
$map[1,2]='лес'
$map[1,3]='лес'
$map[2,2]='лес'
$map[4,0]='река'
</pre>
<p>
В данном примере в квадратных скобках вместо номера ячейки мы указываем числа, перечисляемые через запятую. Таким образом мы создаём ячейки <strong>двумерного</strong> массива.
</p>
<p>
Числа в квадратных скобках — это строка значений, или <strong><a class="wikilink1" href="help_tuples.htm" title="help:tuples">кортеж</a></strong>.
</p>
<p>
Используя для индексации элементов массивов кортежи, мы можем создавать трёхмерные, четырёхмерные, и вообще сколькиугодно-мерные массивы:
</p>
<p>
</p><pre class="brush: qsp">
$space[0,-2,9] = 'космический корабль'
value_time[12,33,1,366] = 137
макрокосмос_миллиардов_микрокосм[12,34,12,98,76,30,11,19,137,90] = 991112
</pre>
<p>
Для многомерных индексов можно использовать не только числовые значения, но и строковые:
</p>
<p>
</p><pre class="brush: qsp">
данные['таблица_данных',0,1]=73
яблоки['Паша','левый карман']=91
яблоки['Миша','правый карман']=10
$map[12,14,'слой_подземелья']="стена"
</pre>
<p>
Есть небольшая хитрость в том, как назначаются многомерные индексы ячейкам массивов. Когда вы инициализируете (создаёте; объявляете) новую ячейку массива с многомерным индексом, происходит следующее:
</p>
<ul>
<li class="level1"><div class="li"> Плеер создаёт новую ячейку с новым <strong>числовым</strong> индексом, следующим по порядку. Например, если в массиве уже были созданы семь ячеек, создаётся ячейка с числовым индексом <code>7</code>.</div>
</li>
<li class="level1"><div class="li"> Затем плеер "прикрепляет" указанный многомерный индекс к числовому.</div>
</li>
</ul>
<p>
Поэтому, если вы создаёте ячейку с многомерным индексом, вы можете получать из неё значения в том числе и по числовому индексу:
</p>
<p>
</p><pre class="brush: qsp">
яблоки['у Паши','левый карман']=37
яблоки['у Паши','правый карман']=5
яблоки['у Лёши','левый карман']=11
яблоки['у Лёши','правый карман']=19
*pl яблоки[0] &amp; ! выведет на экран число 37
*pl яблоки[1] &amp; ! выведет на экран число 5
*pl яблоки[2] &amp; ! выведет на экран число 11
*pl яблоки[3] &amp; ! выведет на экран число 19
</pre>
<p>
<strong>Настоятельно рекомендуется</strong> использовать для индексирования или только числовые индексы, или только многомерные индексы.
</p>
<p>
Поскольку многомерные индексы - это кортежи: - можно использовать переменные типа <strong>кортеж</strong> для подстановок в индексах таких массивов: </p><pre class="brush: qsp">
%coords = [120, 450, -37]
$map[%coords] = 'Alien'
</pre> - Запись с дополнительным набором скобок эквивалентна записи с одним набором скобок при указании индекса ячейки массива: <pre class="brush: qsp">
$array[1, 2, 137]
! эквивалентно
$array[[1, 2, 137]]
</pre>
</div>
<h3 class="sectionedit9" id="uproschjonnyj_dostup_k_jachejkam_massivov">Упрощённый доступ к ячейкам массивов</h3>
<div class="level3">
<p>
На самом деле каждая переменная в QSP является массивом, состоящим из одной единственной ячейки:
</p>
<p>
</p><pre class="brush: qsp">
яблоки = 0
!эквивалентно
яблоки[0] = 0
</pre>
<p>
то есть, если мы создаём переменную с именем "яблоко", мы тем самым создаём массив с именем "яблоко", состоящий из одной ячейки.
</p>
<p>
Таким образом вы всегда можете получить или присвоить данные нулевой ячейке массива, просто указав его имя:
</p>
<p>
</p><pre class="brush: qsp">
! присваиваем нулевой ячейке массива '$COUNTER' строковое значение
$counter='счётчик'
*pl $counter[0] &amp; ! проверяем
! присваиваем нулевым ячейкам массивов red, green, blue значения
set red[0],green[0],blue[0]=234,198,77
*pl "red: &lt;&lt;red&gt;&gt;, green: &lt;&lt;green&gt;&gt;, blue: &lt;&lt;blue&gt;&gt;" &amp; ! проверяем
</pre>
<p>
Существует упрощённый синтаксис чтения последнего и добавления нового элемента в массив. Для этого квадратные скобки пишутся без указания индекса:
</p>
<ul>
<li class="level1"><div class="li"> при записи значения в массив будет создан новый элемент сразу за последним. Например: <pre class="brush: qsp">

! Если массив был пустой, то
$objs[] = 'Напильник' &amp;! $objs[0] = 'Напильник'
$objs[] = 'Топор' &amp;! $objs[1] = 'Топор'
$objs[] = 'Доска' &amp;! $objs[2] = 'Доска'
</pre></div>
</li>
<li class="level1"><div class="li"> при получении значения из массива будет выбран последний элемент. Например: <pre class="brush: qsp">

*pl $objs[] &amp;! 'Доска' из примера выше
</pre></div>
</li>
</ul>
</div>
<h2 class="sectionedit10" id="funkcii_i_operatory_dlja_raboty_s_massivami">Функции и операторы для работы с массивами</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> <code id="statement_KILLVAR">KILLVAR [$имя_массива], [индекс_элемента]</code> - удаление элемента с индексом <code>[индекс_элемента]</code> из массива с названием <code>[$имя_массива]</code>. Название массива всегда нужно писать в кавычках. Пример: <pre class="brush: qsp">
! удаление по числовому индексу
killvar 'яблоко',3
! удаление элемента по строковому индексу
killvar '$item_loc','палка'
! удаление элемента по многомерному индексу
killvar '$space',[0,-2,9]
</pre></div>
<ul>
<li class="level2"><div class="li"> Если индекс элемента не указан, то удаляется весь массив. <pre class="brush: qsp">
! удаляем массив $map целиком
killvar '$map'
</pre></div>
</li>
<li class="level2"><div class="li"> Если оператор вызван без аргументов, то удаляются все массивы и переменные в игре! <pre class="brush: qsp">
! удаляем все массивы и переменные
KILLVAR
</pre></div>
</li>
<li class="level2"><div class="li"> При удалении элемента все следующие за ним элементы сдвигаются на позицию вверх. <pre class="brush: qsp">
a[0]=4
a[1]=3
a[2]=23
a[3]=15
KILLVAR 'a',1
!теперь массив выглядит так:
a[0]=4
a[1]=23
a[2]=15
</pre></div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <code id="statement_KILLALL">KILLALL</code> - оператор эквивалентен конструкции "<code>KILLVAR &amp; KILLOBJ</code>", то есть удаляет все переменные/массивы в игре, а так же очищает Окно предметов. Обычно применяется в начале игры, чтобы при возврате в начальную локацию после неудачного прохождения какого-то этапа игры обнулить все переменные (в противном случае, может оказаться, что запертые двери уже открыты, жена похищена до свадьбы, а Баба-Яга уже отдала кому-то нужный клубочек).</div>
</li>
<li class="level1"><div class="li"> <code id="statement_COPYARR">COPYARR [$приёмник],[$источник],[#начало],[#количество]</code> - копирование в массив-приёмник <code>[#количество]</code> элементов из массива-источника начиная с элемента под номером <code>[#начало]</code>. Размер массива-приёмника при копировании не имеет значения.</div>
<ul>
<li class="level2"><div class="li"> Параметр <code>[#количество]</code> является необязательным. По умолчанию - до конца массива-источника.</div>
</li>
<li class="level2"><div class="li"> Параметр <code>[#начало]</code> является необязательным. По умолчанию - <code>0</code>.</div>
</li>
<li class="level2"><div class="li"> Не имеет значения, указываете ли вы <code>$</code> или <code>%</code> перед названием массива, или нет. Копируются элементы с любыми типами значений.</div>
</li>
<li class="level2"><div class="li"> Примеры: <pre class="brush: qsp">
COPYARR '$a','$b'
COPYARR 'a','b'
! $arrname1, $arrname2 = 'arr', 'bar'
COPYARR $arrname1,$arrname2,10,5
COPYARR 'a&lt;&lt;$arrname1&gt;&gt;','a&lt;&lt;$arrname2&gt;&gt;'
</pre></div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <code id="statement_SORTARR">SORTARR [$имя_массива], [#порядок]</code> — Данный оператор сортирует указанный массив. Параметр <code>[#порядок]</code> опционален. Если не указан или равен 0, то сортирует массив по возрастанию (от меньшего к большему). Если равен 1, то сортирует массив по убыванию (от большего к меньшему).</div>
<ul>
<li class="level2"><div class="li"> Может сортировать массивы любых типов (числа, строки, кортежи), но не допускается смешивать значения разных типов в одном массиве.</div>
</li>
<li class="level2"><div class="li"> Для указания типа сортируемых значений нужно указать префикс типа как часть имени массива (<code>$</code>, <code>%</code>).</div>
</li>
<li class="level2"><div class="li"> Пример сортировки текстового массива: <pre class="brush: qsp">
$a[] = 'nn'
$a[] = 'zz'
$a[] = 'aa'
sortarr '$a'
!проверяем результат сортировки:
loop local i=0 while i&lt;arrsize('$a') step i+=1:
  *pl $a[i]
end
</pre></div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <code id="statement_SCANSTR">SCANSTR [$имя_массива], [$текст_для_разбора], [$регэксп], [#номер_группы]</code> — в массив <code>[$имя_массива]</code> помещаются строки, соответствующие <a class="wikilink1" href="help_regexp.htm" title="help:regexp">регулярному выражению</a> <code>[$регэксп]</code>, которые будут найдены в строке <code>[$текст_для_разбора]</code>. Если указан параметр <code>[#номер_группы]</code>, в массив будет помещаться не вся строка, соответствующая регулярному выражению, а лишь часть, соответствующая указанной группе в этом регулярном выражении. Примеры: <pre class="brush: qsp">
! вытаскиваем из строки все слова:
$text = 'Шла Саша по шоссе, а Грека через реку.'
scanstr '$words', $text, '\b\w+\b'
!В массиве $words окажутся значения: 'Шла', 'Саша', 'по', 'шоссе', 'а', 'Грека', 'через', 'реку'

! разбиваем строку по разделителю:
$text = 'утро|день|вечер|ночь' 
scanstr '$words', $text, '[^|]+'
!В массиве $words окажутся значения: 'утро', 'день', 'вечер', 'ночь'

! вытаскиваем из строки все слова, помещённые в квадратные скобки, но без квадратных скобок:
$text = '[first] ignoredtext [second][third] also ignored' 
scanstr '$words', $text, '\[(.*?)\]', 1
!В массиве $words окажутся значения: 'first', 'second', 'third'
</pre></div>
</li>
<li class="level1"><div class="li"> <code id="func_ARRITEM">ARRITEM([$имя_массива],[индекс_элемента])</code> — возвращает значение элемента массива с названием <code>[$имя_массива]</code> по указанному индексу. То есть функция извлекает значение из указанной ячейки массива. Примеры: <pre class="brush: qsp">
! выводим значение элемента с индексом 3
*pl $arritem('$mass', 3)
! выводим значение элемента с текстовым индексом
*pl $arritem('$mass', 'Петя')
! выводим значение элемента с многомерным индексом
*pl $arritem('$mass', [-2, 9, 0])
</pre> Эта функция может быть полезна для извлечения значений, если имя массива заранее не известно. Пример: <pre class="brush: qsp">
! выводим содержимое нескольких массивов без использования ''**DYNAMIC**'':
$array_name[]='mass_1'
$array_name[]='mass_2'
$array_name[]='mass_3'
$array_name[]='mass_4'
$array_name[]='mass_5'
! внешний цикл перебирает имена массивов
loop local j=0 while j&lt;arrsize('$array_name') step j+=1:
    ! внутренний цикл выводит содержимое массивов
    loop local i=0 while i&lt;arrsize($array_name[j]) step i+=1:

   *pl arritem($array_name[j], i)
    end
end
</pre></div>
</li>
<li class="level1"><div class="li"> <code id="statement_SETVAR">SETVAR [$имя_массива], [значение], [индекс]</code> — устанавливает значение элемента массива с названием <code>[$имя_массива]</code> по указанному индексу. То есть оператор присваивает значение указанной ячейке массива. Префикс имени переменной указывает тип значения, которое нужно записать в элемент массива (как с обычными присваиваниями). Параметр <code>[индекс]</code> опционален. Если этот параметр не указан, то значение присваивается 0-му элементу. Значение и индекс могут быть любых типов. Примеры: <pre class="brush: qsp">
SETVAR 'A', 65
SETVAR '$X', 'name', 4
SETVAR '$X', 'name', 'string index'
SETVAR '%Q', ['пример', 'кортежа'], 3
SETVAR '%Q', ['пример', 'кортежа'], [x, y]
</pre> Данный оператор дополняет функцию <code><strong>ARRITEM</strong></code> и позволяет избегать использования <code>DYNAMIC</code> в некоторых случаях.</div>
</li>
<li class="level1"><div class="li"> <code id="func_ARRSIZE">ARRSIZE([$имя_массива])</code> - функция возвращает число элементов массива с названием <code>[$имя_массива]</code>.</div>
<ul>
<li class="level2"><div class="li"> Не имеет значения, указываете ли вы <code>$</code> или <code>%</code> перед названием массива или нет. Подсчитывается общее число ячеек и со значениями любых типов.</div>
</li>
<li class="level2"><div class="li"> Примеры: <pre class="brush: qsp">
n = ARRSIZE('a')
n = ARRSIZE('$a')
!Результат будет одинаковый
</pre></div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <code id="func_ARRTYPE"><strong>ARRTYPE(</strong>[$имя_переменной], [индекс]<strong>)</strong></code> - получает тип значения, которое хранится в массиве <code>[$имя_переменной]</code> под индексом <code>[индекс]</code>.</div>
<ul>
<li class="level2"><div class="li"> Параметр <code>[индекс]</code> может отсутствовать, при этом он принимается равным <code>0</code>. То есть вычисляется тип значения переменной/нулевой ячейки массива. Индекс может быть любого типа.</div>
</li>
<li class="level2"><div class="li"> Функция возвращает одно из следующих значений в зависимости от типа:</div>
<ul>
<li class="level3"><div class="li"> <code>''</code> (пустая строка) - элемент массива не задан.</div>
</li>
<li class="level3"><div class="li"> <code>'#'</code> - элемент содержит число.</div>
</li>
<li class="level3"><div class="li"> <code>'$'</code> - элемент содержит строку.</div>
</li>
<li class="level3"><div class="li"> <code>'%'</code> - элемент содержит кортеж.</div>
</li>
</ul>
</li>
<li class="level2"><div class="li"> Пример: <pre class="brush: qsp">
$ddd = 'text'
arrtype('ddd') &amp; ! '$'

$g = 'text' &amp; g = 13
arrtype('g') &amp; ! '#'

%tuple['index'] = [12, 'string']
arrtype('tuple', 'index') &amp; ! '%'

! $empty not exist
arrtype('$empty') &amp; ! ''
</pre></div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <code>MAX([выр1],[выр2], …)</code> - возвращает максимальное из значений выражений-аргументов. Если передан один аргумент, то считается, что указано имя массива: <pre class="brush: qsp">
MAX('a') &amp;! вернёт максимальное из числовых значений элементов массива "a"
MAX('$b') &amp;! вернёт максимальное из текстовых значений элементов массива "$b"
MAX('%d') &amp;! вернёт максимальный из кортежей в массиве '%d'
</pre></div>
</li>
<li class="level1"><div class="li"> <code>MIN([выр1],[выр2], …)</code> - возвращает минимальное из значений выражений-аргументов. Если передан один аргумент, то считается, что указано имя массива: <pre class="brush: qsp">
MIN('a') &amp;! вернёт минимальное из числовых значений элементов массива "a"
MIN('$b') &amp;! вернёт минимальное из текстовых значений элементов массива "$b"
MIN('%d') &amp;! вернёт минимальный из кортежей в массиве '%d'
</pre></div>
</li>
<li class="level1"><div class="li"> <code id="func_ARRCOMP">ARRCOMP([$имя_массива],[$шаблон],[#начало])</code> - возвращает номер элемента массива <code>[$имя_массива]</code>, соответствующего регулярному выражению <code>[$шаблон]</code>. Поиск начинается с элемента с номером <code>[#начало]</code>; индексация элементов массива ведётся с нуля. Если указанное значение не найдено, функция возвращает <code>-1</code>.</div>
<ul>
<li class="level2"><div class="li"> Поиск работает только по текстовым массивам (символ <code>$</code> в названии массива можно опустить).</div>
</li>
<li class="level2"><div class="li"> Параметр <code>[#начало]</code> может отсутствовать, при этом он принимается равным <code>0</code>.</div>
</li>
<li class="level2"><div class="li"> Примеры: <pre class="brush: qsp">
!Поиск строки 'This' среди элементов массива "$A"
ARRCOMP('$A','This',0)
!'Поиск строки, соответствующей регулярному выражению "abc\d+"
(первые два элемента массива игнорируются)'
ARRCOMP('$A','abc\d+',2)
!'аналогично предыдущему примеру, но поиск осуществляется
по всем элементам массива'
ARRCOMP('$A','.*string.*',0)
ARRCOMP('$A','This') &amp;! эквивалентно 1му варианту
</pre></div>
</li>
<li class="level2"><div class="li"> Функция возвращает только числовой индекс элемента. Строковый или многомерный индекс с помощью данной функции получить нельзя.</div>
</li>
</ul>
</li>
</ul>
<p>
Так же см. ARRPACK и UNPACKARR в разделе <a class="wikilink1" href="help_tuples.htm" title="help:tuples">"Кортежи"</a>
</p>
<p>
<a class="wikilink1" href="help_strings.htm" title="help:strings">Вперёд: Строки</a>
</p>
</div>

<!-- wikipage stop -->
</div></body>
</html>