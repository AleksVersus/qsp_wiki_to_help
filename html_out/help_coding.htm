<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//RU">
<html lang="ru">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>Программный код [Документация QSP]</title>
<link href="default.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div class="page group">
<!-- wikipage start -->
<!-- TOC START -->

<!-- TOC END -->
<p>
<a class="wikilink1" href="help_expressions.htm" title="help:expressions">Назад: Выражения</a>
</p>
<h1 class="sectionedit1" id="programmnyj_kod">Программный код</h1>
<div class="level1">
<p>
Выполнение кода в плеере <strong>QSP</strong> происходит последовательно, команда за командой, сверху вниз и слева направо:
</p>
<p>
</p><pre class="brush: qsp">
*pl "Первая команда"
*pl "Вторая команда"
*pl "Третья команда"

*pl "Четвёртая команда" &amp; *pl "Пятая команда" &amp; *pl "Шестая команда"
</pre>
</div>
<h2 class="sectionedit2" id="struktura_komand">Структура команд</h2>
<div class="level2">
<p>
Все команды в <strong>QSP</strong> составляются по общим принципам:
</p>
<p>
</p><pre class="brush: qsp">
  {оператор} [значение 1], [значение 2], ..., [значение 20]
</pre>
<p>
Здесь вместо <code>{оператор}</code> может и должен стоять любой оператор <strong>QSP</strong> из тех, что перечислены в разделе <a class="wikilink1" href="help_keywords_operator.htm" title="help:keywords_operator">"Ключевые слова. Операторы"</a>. Если в команде нет <code>{оператор}</code>, значит на самом деле на этом месте подразумевается <strong>неявный оператор</strong>.
</p>
<p>
</p><pre class="brush: qsp">
! здесь используются явные операторы:
*pl "Ехал Грека Через Реку"
addobj "Рак"

! а здесь имеет место неявный оператор:
137 + 294
func('pow', 3, 3)
</pre>
<p>
В качестве значений <code>[значение 1]</code>, <code>[значение 2]</code>, … ,<code>[значение 20]</code> могут выступать строковые или числовые константы, переменные, значения функций, или целые выражения, а число таких значений зависит от назначения оператора. Например, для оператора <code>*PL</code> может быть указано лишь одно значение, а для оператора <code>ADDOBJ</code> от одного до трёх таких значений. Сами значения перечисляются через запятую.
</p>
<p>
</p><pre class="brush: qsp">
*pl "Три в кубе это "+func('pow',3,3)+". Да, серьёзно. А ты не верил?"
addobj "Апельсинка", "img/orange.png", 1
</pre>
<p>
Если необходимо, то для удобства чтения кода значения для операторов можно (но не обязательно) помещать в круглые скобки:
</p>
<p>
</p><pre class="brush: qsp">
pl("Строка текста")
addobj("Отвёртка","img/screwdriver.png",3)
</pre>
<p>
<strong>Внимание!</strong> В одной команде не может быть более одного оператора! Равно так же не может быть команды совсем без оператора. Если в вашей команде нет оператора, то вы имеете дело с <strong>неявным оператором</strong>.
</p>
<p>
Операция присваивания предполагает, что перед именем переменной стоит оператор <code>SET</code>, хотя обычно этот оператор опускают, то есть его тоже можно назвать "неявным":
</p>
<p>
</p><pre class="brush: qsp">
[имя_переменной] = [значение]
</pre>
<p>
Здесь <code>=</code> — это операция присваивания. Не путайте с операцией сравнения <strong>равно</strong>.
</p>
</div>
<h2 class="sectionedit3" id="porjadok_zapisi_komand">Порядок записи команд</h2>
<div class="level2">
<p>
Вот несколько правил и рекомендаций для корректного написания кода:
</p>
<ul>
<li class="level1"><div class="li"> Каждую отдельную команду нужно записывать в отдельной строке.</div>
</li>
<li class="level1"><div class="li"> Отступы (пробелы и символы табуляции) перед командой и после неё игнорируются плеером, поэтому вы можете ставить их в нужном количестве для удобства чтения кода: <pre class="brush: qsp">
*p "&lt;table width=240&gt;"
  *p "&lt;tr&gt;"
    *p "&lt;td&gt;Имя:&lt;/td&gt;"
    *p "&lt;td&gt;"
      *p $name
    *p "&lt;/td&gt;"
  *p "&lt;/tr&gt;"
  *p "&lt;tr&gt;"
    *p "&lt;td&gt;возраст:&lt;/td&gt;"
    *p "&lt;td&gt;"
      *p age
    *p "&lt;/td&gt;"
  *p "&lt;/tr&gt;"
*p "&lt;/table&gt;"
</pre></div>
</li>
<li class="level1"><div class="li"> Пустые строки так же игнорируются плеером, поэтому для лучшей читаемости кода вы можете размещать их между командами: <pre class="brush: qsp">
яблоко = 1
груша = 1
*pl 'Яблок' + яблоко
*pl 'Груш' + груша
</pre></div>
</li>
<li class="level1"><div class="li"> При необходимости можно написать несколько команд в одну строку. При этом в качестве разделителя команд служит символ "<strong>&amp;</strong>" (не путайте с операцией объединения строк): <pre class="brush: qsp">
яблоко+=1 &amp; *pl "У меня есть &lt;&lt;яблоко&gt;&gt; яблок." &amp; яблоко_взял=1
</pre> Без необходимости так делать не рекомендуется, поскольку это ухудшает читаемость кода, а так же повышает вероятность допустить <a class="wikilink1" href="glossary_bag.htm" title="glossary:bag">баг</a>. Подобное перечисление команд уместно в гиперссылках: <pre class="brush: qsp">
*pl '&lt;a href="EXEC: яблоко += 1 &amp; GT $CURLOC"&gt;яблоко&lt;/a&gt;'
</pre> В данном случае при нажатии на ссылку выполнится код: <pre class="brush: qsp">
яблоко += 1
GT $CURLOC
</pre></div>
</li>
<li class="level1"><div class="li"> Внутреннюю часть многострочных операторов рекомендуется сдвигать вправо 2-4 пробелами (или одним символом табуляции). Это никак не влияет на выполнение, но делает код более читаемым: <pre class="brush: qsp">
IF яблоки=0 :
    ADDOBJ 'Яблоко'
    яблоки = 1
END
</pre></div>
</li>
<li class="level1"><div class="li"> Крайне редко для повышения читаемости кода приходится разбивать строку на несколько. Такая строка хотя и будет в коде разбита на части, но будет восприниматься плеером, как единая (сообщения об ошибках будут выводится с учётом того, что это одна строка). Чтобы следующая строка считалась частью текущей, нужно в конце текущей строки дописать <code> _</code> (пробел и символ подчёркивания): <pre class="brush: qsp">
if a&lt;5 and n-b&gt;4+5+h/7*2 or t=4: p 'TTTTTTTTT' &amp; cla &amp; $f='Text Variable' &amp; goto 'FFFF'
</pre> равнозначно <pre class="brush: qsp">
if a&lt;5 and _
  n-b&gt;4+5+h/7*2 or _
  t=4: p 'TTTTTTTTT' _
&amp; cla &amp; $f='Text Variable' _
&amp; goto 'FFFF'
</pre> Вместо разбиения строки рекомендуется видоизменить код так, чтобы разбивать строку не требовалось. <strong>Обратите внимание.</strong> Сочетание символов <code>_</code> (пробел и символ подчёркивания) при склеивании строк заменяется на пробел, поэтому такой код: <pre class="brush: qsp">
t _
or _
t
</pre> будет эквивалентен такому коду: <pre class="brush: qsp">
t or t
</pre> Разбивать команду на две строки внутри строковой константы нельзя: <pre class="brush: qsp">
! на экране мы увидим две строки текста, а не одну:
*pl "Это строка, которую я хочу разбить _
на две строки кода, но при выводе видеть одну строку"
</pre></div>
</li>
</ul>
</div>
<h2 class="sectionedit4" id="kommentarii">Комментарии</h2>
<div class="level2">
<p>
Оператор комментария <code>!</code> служит для комментирования кода и позволяет оставлять "заметки на полях", которые помогут впоследствии ориентироваться в коде. Всё, что следует за оператором комментария, плеер игнорирует.
</p>
<p>
Поскольку <code>!</code> — это оператор (не путайте с операцией <strong>не равно</strong>), если вы пишете его на одной строке с другими командами, нужно обязательно ставить разделитель <code>&amp;</code> (амперсанд) между последней командой и оператором комментария:
</p>
<p>
</p><pre class="brush: qsp">
! это комментарий в отдельной строке
яблоки = 0 &amp; ! а это комментарий в строке с командой
</pre>
<p>
Исключением из этого правила является установка комментария после двоеточия в многострочном условии, цикле или действии. В этом случае амперсанд не нужен:
</p>
<p>
</p><pre class="brush: qsp">
act "Взять яблоко": ! многострочное действие
    addobj "Яблоко"
    яблоко += 1
end
</pre>
<p>
Так как весь текст после оператора комментария будет проигнорирован плеером, комментарий надо ставить всегда самым последним в строке из нескольких команд:
</p>
<p>
</p><pre class="brush: qsp">
! комментарий. Следующие команды не работают: &amp; *pl "Первая команда" &amp; *pl "вторая команда"
*pl "Эта команда работает" &amp; ! а остальные нет &amp; *pl "вторая команда" &amp; *pl "третья команда"
*pl "Эта команда работает" &amp; *pl "и эта работает" &amp; ! а последняя нет &amp; *pl "третья команда"
*pl "Все три" &amp; *pl " команды" &amp; *pl "работают" &amp; ! а это комментарий
</pre>
<p>
Комментарии бывают двух видов: однострочные и многострочные.
</p>
<ul>
<li class="level1"><div class="li"> Однострочный комментарий начинается от оператора комментария и заканчивается с концом строки: <pre class="brush: qsp">
! Однострочный комментарий
! и это однострочный комментарий
яблоки = 0 &amp; ! и это однострочный комментарий
</pre></div>
</li>
<li class="level1"><div class="li"> Многострочный комментарий так же начинается от оператора комментария и заканчивается с концом строки, однако при использовании кавычек (<code>" "</code>), апострофов (<code>' '</code>) или фигурных скобок, он может захватывать так же и те строки, что размещены внутри кавычек, апострофов или фигурных скобок: <pre class="brush: qsp">
!'Многострочный
комментарий в апострофах'
яблоки = 1
сыр = 5 &amp;  ! А здесь "комментарий начинается
в той же строке, но" заканчивается 'сильно
позже'. Во всём виноваты {кавычки и скобки
} Кстати:
яблоки = 0
!'Комментарии рекомендуется писать всё-таки
в отдельных строках, а не как бутерброд с "сыром"'
</pre></div>
</li>
</ul>
</div>
<h2 class="sectionedit5" id="zapis_konstant">Запись констант</h2>
<div class="level2">
<p>
Под константами в <strong>QSP</strong> подразумеваются конкретные числовые или строковые значения. Конкретный кортеж (запись значений в квадратных скобках) тоже можно назвать константой. В следующем примере для операторов вывода текста указаны конкретные значения, это и есть константы:
</p>
<p>
</p><pre class="brush: qsp">
! вывод на экран числа 137. Можно назвать это число константой.
*pl 137
! вывод на экран строки текста. Эту строку можно назвать константой
*pl "На окошке крошку-мошку ловко ловит лапой кошка"
! выводим на экран кортеж. Кортеж тоже может быть константой
*pl [13, 'unit', 37]
</pre>
<p>
Для записи числовых констант (чисел) используются символы цифр без дополнительных обозначений:
</p>
<p>
</p><pre class="brush: qsp">
x = 145 &amp; ! 145 здесь - константа
(137+299*2)/11-19 &amp; ! целое выражение из числовых констант
</pre>
<p>
Для записи строковых констант (строк) используются символы, отмечающие начало и конец такой строковой константы. Можно использовать кавычки (<code>" "</code>), апострофы (<code>' '</code>), или фигурные скобки (<code>{ }</code>):
</p>
<p>
</p><pre class="brush: qsp">
*pl "Это строковая константа"
*pl 'И это строковая константа'
*pl {И даже это}
</pre>
<p>
Более подробно о правилах записи строк в <strong>QSP</strong> можно почитать в разделе <a class="wikilink1" href="help_strings.htm" title="help:strings">"Строки"</a>.
</p>
<p>
Для записи кортежей используются квадратные скобки:
</p>
<p>
</p><pre class="brush: qsp">
*pl ['это кортеж', 'если он ', "не присвоен переменной", "его можно считать константой"]
</pre>
<p>
См. также <a class="wikilink1" href="howto_namedconst.htm" title="howto:namedconst">"Именованные константы"</a>.
</p>
</div>
<h2 class="sectionedit6" id="operatory_i_funkcii">Операторы и функции</h2>
<div class="level2">
<p>
<strong>Оператор</strong> - ключевое слово (команда) языка <strong>QSP</strong>, выполняющее какое-либо действие. Оператор может иметь параметры (аргументы), которые задаются выражениями. Операторы не возвращают результат выполнения.
</p>
<p>
Как правило, операторы меняют состояние игры.
</p>
<p>
Каждая команда <strong>QSP</strong> содержит один оператор и его аргументы (параметры). Если вы написали команду без оператора, то в ней обязательно присутствует <strong>неявный оператор</strong>.
</p>
<p>
</p><pre class="brush: qsp">
!Примеры вызовов операторов:
ADDOBJ 'ключ','pics/key.png'
ADDOBJ ('ключ','pics/key.png')
PL('текст')
CLEAR()
</pre>
<p>
<strong>Функция</strong> - ключевое слово, которое используется для того, чтобы получить какое-либо значение. Например, сколько предметов игрок несёт в рюкзаке. Для этого, в коде мы указываем функцию, и необходимые для расчёта параметры (аргументы функции). Результат, "посчитанный" этой функцией, подставляется на её место в <strong>выражении</strong>. На языке программистов это звучит так: <strong>"мы вызвали функцию, и функция вернула нам значение"</strong>.
</p>
<p>
Как правило, при вызове функции состояние игры не меняется. Примеры вызовов функций:
</p>
<p>
</p><pre class="brush: qsp">
maximum = MAX(1, 2, 4)
случайное_число = RAND(4)
предметов_в_рюкзаке = COUNTOBJ 
PL $STR(43)
</pre>
<p>
В одной команде может быть вызвано несколько функций:
</p>
<p>
</p><pre class="brush: qsp">
*pl "Случайный предмет: "+$getobj(rand(1,countobj))
bcolor = rgb(func('hex_in_dec','ff'),func('hex_in_dec','34'),func('hex_in_dec','67'))
</pre>
<p>
При использовании функций, возвращающих текстовое значение, настоятельно рекомендуется прописывать перед именем функции символ <code>$</code> для улучшения читаемости кода.
</p>
<p>
Максимальное число аргументов для операторов и функций в <strong>QSP</strong>: 20.
</p>
</div>
<h2 class="sectionedit7" id="bazovye_funkcii">Базовые функции</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> <code id="func_QSPVER">$QSPVER</code> - возвращает версию библиотеки плеера в формате "X.Y.Z Player". Например, классический плеер версии 5.9.0. возвращает значение "5.9.0 (classic)", а qSpider просто "5.9.0". Пример использования: <pre class="brush: qsp">
if $QSPVER&lt;'5.9.0':
*pl "Ваша версия плеера не подходит для данной игры. Установите плеер версии 5.9.0."
end
</pre> Так же данная функция может возвращать платформу, на которой запущена игра, если указать аргументом значение "platform": <pre class="brush: qsp">
$QSPVER('platform')
</pre></div>
</li>
<li class="level1"><div class="li"> <code id="func_CURLOC">$CURLOC</code> - возвращает название текущей локации.</div>
</li>
</ul>
</div>
<h3 class="sectionedit8" id="matematicheskie_funkcii">Математические функции</h3>
<div class="level3">
<ul>
<li class="level1"><div class="li"> <code id="func_RAND">RAND([#выр1],[#выр2],[#мода])</code> - возвращает случайное число между числами <code>[#выр]</code> и <code>[#выр2]</code>.</div>
<ul>
<li class="level2"><div class="li"> Параметр <code>[#мода]</code> позволяет указать число, которое должно выпадать более часто, чем остальные. При этом распределение частоты выпадения будет плавно изменяться для всех остальных чисел. Подробнее о распределении читайте в статье <a class="wikilink1" href="howto_randomize.htm" title="howto:randomize">Третий параметр RAND</a>.</div>
</li>
<li class="level2"><div class="li"> Если 3й параметр не указан, то функция возвращает случайное число в заданном диапазоне с равномерным/равновероятным распределением чисел.</div>
</li>
<li class="level2"><div class="li"> Параметр <code>[#выр2]</code> может отсутствовать, при этом он принимается равным единице (<strong><code>1</code></strong>).</div>
</li>
<li class="level2"><div class="li"> Примеры: <pre class="brush: qsp">
RAND(1,4) &amp; ! вернёт случайное значение от 1 до 4
RAND(4,1) &amp; ! вернёт случайное значение от 1 до 4
RAND(1000) &amp; ! вернёт случайное значение от 1 до 1000
RAND 1000 &amp; ! вернёт случайное значение от 1 до 1000

x = RAND(1, 1000, 500) &amp; ! чаще будет выпадать 500
x = RAND(1, 1000, 1) &amp; ! чаще будет выпадать 1
x = RAND(1, 1000, 1000) &amp; ! чаще будет выпадать 1000
x = RAND(-1000, 0, -500) &amp; ! чаще будет выпадать -500
x = RAND(1, 1000, 5000) &amp; ! чаще будет выпадать 1000
x = RAND(-1000, -100, -5000) &amp; ! чаще будет выпадать -1000
</pre></div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <code id="func_RND">RND</code> - возвращает случайное значение от 1 до 1000.</div>
</li>
<li class="level1"><div class="li"> <code id="func_MAX">MAX([выр1],[выр2], …)</code> - возвращает максимальное из значений выражений-аргументов. Если передан один аргумент, то считается, что указано имя массива: <pre class="brush: qsp">
MAX(1,2,5,2,0) &amp;! вернёт 5
MAX(a,b,c) &amp;! вернёт максимальное из значений переменных a,b,c
MAX('aa','ab','zz') &amp;! вернёт 'zz'
MAX('a') &amp;! вернёт максимальное из числовых значений элементов массива "a"
MAX('$b') &amp;! вернёт максимальное из текстовых значений элементов массива "$b"
</pre></div>
</li>
<li class="level1"><div class="li"> <code id="func_MIN">MIN([выр1],[выр2], …)</code> - возвращает минимальное из значений выражений-аргументов. Если передан один аргумент, то считается, что указано имя массива: <pre class="brush: qsp">
MIN(1,2,5,2,0) &amp;! вернёт 0
MIN(a,b,c) &amp;! вернёт минимальное из значений переменных a,b,c
MIN('aa','ab','zz') &amp;! вернёт 'aa'
MIN('a') &amp;! вернёт минимальное из числовых значений элементов массива "a"
MIN('$b') &amp;! вернёт минимальное из текстовых значений элементов массива "$b"
</pre></div>
</li>
</ul>
<p>
<a class="wikilink1" href="help_cycle.htm" title="help:cycle">Вперёд: Циклы</a>
</p>
</div>

<!-- wikipage stop -->
</div></body>
</html>