<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//RU">
<html lang="ru">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>Выражения [Документация QSP]</title>
<link href="default.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div class="page group">
<!-- wikipage start -->
<!-- TOC START -->

<!-- TOC END -->
<p>
<a class="wikilink1" href="help_variables.htm" title="help:variables">Назад: Переменные</a>
</p>
<h1 class="sectionedit1" id="vyrazhenija">Выражения</h1>
<div class="level1">
<p>
<strong>Выражение</strong> - это набор значений, констант, переменных, функций, связанных между собой различными операциями. Программа выполняет (интерпретирует) такое выражение, вычисляя его значение.
</p>
<p>
Для изменения приоритета операций в выражении могут присутствовать круглые скобки.
</p>
</div>
<h2 class="sectionedit2" id="oboznachenija">Обозначения</h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> <code>[выр]</code> - выражение может быть как текстового, так и числового типа.</div>
</li>
<li class="level1"><div class="li"> <code>[$выр]</code> - выражение текстового (строкового) типа (но при необходимости движок автоматически переведёт число в строку).</div>
</li>
<li class="level1"><div class="li"> <code>[#выр]</code> - выражение числового типа (если возможно, движок автоматически переведёт строку в число).</div>
</li>
<li class="level1"><div class="li"> <code>[%выр]</code> - выражение возвращает кортеж.</div>
</li>
</ul>
<p>
<strong>Примечание.</strong> Символ <code>#</code> использован в справке только чтобы разделить выражения произвольного и числового типов. К синтаксису QSP данный символ отношения не имеет.
</p>
</div>
<h2 class="sectionedit3" id="prioritet_operacij">Приоритет операций</h2>
<div class="level2">
<p>
Операции в выражении выполняются в порядке приоритета. Операции с одинаковым приоритетом выполняются по порядку слева направо.
</p>
<p>
Вот список операций для плееров <strong>QSP</strong> версии 5.9.0 в порядке повышения приоритета (от меньшего к большему):
</p>
<ul>
<li class="level1"><div class="li"> <strong><code>OR</code></strong></div>
</li>
<li class="level1"><div class="li"> <strong><code>AND</code></strong></div>
</li>
<li class="level1"><div class="li"> <strong><code>NO</code></strong></div>
</li>
<li class="level1"><div class="li"> <strong><code>=</code></strong>, <strong><code>&lt;</code></strong>, <strong><code>&gt;</code></strong>, <strong><code>!</code></strong>, <strong><code>&lt;&gt;</code></strong>, <strong><code>&lt;=</code></strong>, <strong><code>&gt;=</code></strong>, <strong><code>=&lt;</code></strong>, <strong><code>=&gt;</code></strong> (операции сравнения)</div>
</li>
<li class="level1"><div class="li"> <strong><code>OBJ</code></strong>, <strong><code>LOC</code></strong></div>
</li>
<li class="level1"><div class="li"> <strong><code>&amp;</code></strong> (конкатенация)</div>
</li>
<li class="level1"><div class="li"> <strong><code>+</code></strong>, <strong><code>-</code></strong> (сложение, вычитание)</div>
</li>
<li class="level1"><div class="li"> <strong><code>MOD</code></strong></div>
</li>
<li class="level1"><div class="li"> <strong><code>*</code></strong>, <strong><code>/</code></strong> (умножение, деление)</div>
</li>
<li class="level1"><div class="li"> <strong><code>-</code></strong> (унарный минус)</div>
</li>
<li class="level1"><div class="li"> <strong><code>([выр])</code></strong> - выражения в скобках</div>
</li>
</ul>
<p>
Выражения в <strong>QSP</strong> должны удовлетворять следующим условиям:
</p>
<ul>
<li class="level1"><div class="li"> Максимальная вложенность выражений - 30. Т.е. не глубже 30-ти открытых и вложенных друг в друга скобок.</div>
</li>
<li class="level1"><div class="li"> Максимальное количество операций на одном уровне вложенности - 100.</div>
</li>
</ul>
</div>
<h2 class="sectionedit4" id="opisanie_operacij">Описание операций</h2>
<div class="level2">
<p>
<strong>Важно!</strong> Поскольку в <strong>QSP</strong> нет булевого типа данных, истинность или ложность выражения определяется по его числовому значению. Верным считается числовое выражение, значение которого отлично от <code>0</code>. При значении <code>0</code> выражение считается ложным. Для значения "верно" настоятельно рекомендуется использовать число <code>1</code>, т.к. операции сравнения и логические операции возвращают именно это значение в случае истинности выражения.
</p>
</div>
<h3 class="sectionedit5" id="matematicheskie_operacii">Математические операции</h3>
<div class="level3">
<ul>
<li class="level1"><div class="li"> <strong><code>-[#выр]</code></strong> - унарный минус. Можно поставить перед числовым выражением и таким образом поменять знак этого выражения на противоположный: <pre class="brush: qsp">
x = -12
*pl -x &amp; ! выведет на экран число 12
*pl -(123*12/-10)
*pl -10/-5
</pre></div>
</li>
<li class="level1"><div class="li"> <strong><code>+</code></strong> , <strong><code>-</code></strong> , <strong><code>*</code></strong>, <strong><code>/</code></strong> - сложение, вычитание, умножение, деление соответственно.<br/>
Операции записываются как <strong><code>[#выр1] [операция] [#выр2]</code></strong>: <pre class="brush: qsp">
15+2*5 &amp;! 15+2*5 = 15+10 = 25
15*2+5 &amp;! 15*2+5 = 30+5 = 25
15*5/2 &amp;! (15*5)/2 = 75/2 = 37
15/2*5 &amp;! (15/2)*5 = 7*5 = 35
</pre></div>
</li>
<li class="level1"><div class="li"> <strong><code id="operator_MOD">[#выр1] MOD [#выр2]</code></strong> - остаток от деления. Это операция, которой нас учат ещё в начальной школе. Если мы вычисляем, сколько раз число делится нацело на другое число, то в результате может остаться некая неучтённая часть. Например, если мы хотим разделить <strong>10</strong> на <strong>3</strong>, то число <strong>10</strong> нацело делится на <strong>3</strong> только три раза. Но <strong>3</strong> умножить на <strong>3</strong> - это <strong>9</strong>. Значит, от десяти осталась часть, которая не делится на <strong>3</strong>, это <strong>1</strong> (<strong>10 - 9 = 1</strong>). Эта часть и называется остатком от деления. Для числа <strong>12</strong> остаток от деления на <strong>3</strong> составляет ноль, поскольку двенадцать делится на <strong>3</strong> ровно четыре раза. Примеры: <pre class="brush: qsp">
10 mod 2 &amp; ! 10/2 = 5 -&gt; 2*5=10 -&gt; 10-10 = 0 -&gt; остаток от деления 10 на 2 равен 0
10 mod 3 &amp; ! 10/3 = 3 -&gt; 3*3=9  -&gt; 10-9 = 1  -&gt; остаток от деления 10 на 3 равен 1
10 mod 4 &amp; ! 10/4 = 2 -&gt; 4*2=8  -&gt; 10-8 = 2  -&gt; остаток от деления 10 на 4 равен 2
10 mod 5 &amp; ! 10/5 = 2 -&gt; 5*2=10 -&gt; 10-10 = 0 -&gt; остаток от деления 10 на 5 равен 0
10 mod 6 &amp; ! 10/6 = 1 -&gt; 6*1=6  -&gt; 10-6 = 4  -&gt; остаток от деления 10 на 6 равен 4
10 mod 7 &amp; ! 10/7 = 1 -&gt; 7*1=7  -&gt; 10-7 = 3  -&gt; остаток от деления 10 на 7 равен 3
</pre></div>
</li>
</ul>
</div>
<h3 class="sectionedit6" id="operacii_sravnenija">Операции сравнения</h3>
<div class="level3">
<ul>
<li class="level1"><div class="li"> <strong><code>[выр1] = [выр2]</code></strong> - операция <strong>равно</strong>. Верно, если значения рядом стоящих выражений равны. Данную операцию не стоит путать с операцией присваивания, хотя на первый взгляд они похожи. Чтобы операция <strong>равно</strong> корректно вернула значение, она должна быть записана после ключевого слова <strong><code>IF</code></strong>, <strong><code>ELSEIF</code></strong>, <strong><code>WHILE</code></strong> или в первом аргументе функции <strong><code>IIF</code></strong>, или стоять после явного оператора вывода текста вроде <strong><code>*PL</code></strong>, или если используется с неявным оператором, быть заключённой в скобки. Примеры: <pre class="brush: qsp">
! операция сравнения **равно** с явным указанием оператора перед ней:
*pl 6+12 = 6*3 &amp; ! 6+12 = 6*3 -&gt; 18=18 -&gt; на экране мы увидим число 1, что означает, что значения выражений равны
*pl 226 = 15*15 &amp; ! 226 = 15*15 -&gt; 226=225 -&gt; на экране увидим **0**, так как 226 не равно 225.
! операция сравнения **равно** с неявным оператором
('ab'+'cd' = 'abc'+'d') &amp; ! на экране увидим 1, так как 'ab'+'cd' равно 'abc'+'d'
(13*9 = 19*3) &amp; ! на экране увидим 0, так как 13*9 не равно 19*3
! операция сравнения в условии
if x = y:
  *pl "Числа равны"
else
  *pl "Числа не равны"
end
</pre></div>
</li>
<li class="level1"><div class="li"> <strong><code>[выр1] &lt; [выр2]</code></strong> - операция <strong>меньше</strong>. Верно, если значение выражения слева меньше значения выражения справа. <pre class="brush: qsp">
*pl 37&lt;56 &amp; ! на экране будет число 1, так как 37 меньше 56 
*pl 45&lt;23 &amp; ! на экране будет число 0, так как 45 не меньше 23
*pl 45&lt;45 &amp; ! на экране будет число 0, так как 45 не меньше 45
if x &lt; y:
  "X меньше Y"
elseif y &lt; x:
  "Y меньше X"
else
  "Числа равны"
end
</pre></div>
</li>
<li class="level1"><div class="li"> <strong><code>[выр1] &gt; [выр2]</code></strong> - операция <strong>больше</strong>. Верно, если значение выражения слева больше значения выражения справа. <pre class="brush: qsp">
*pl 37&gt;56 &amp; ! на экране будет число 0, так как 37 не больше 56 
*pl 45&gt;23 &amp; ! на экране будет число 1, так как 45 больше 23
*pl 45&gt;45 &amp; ! на экране будет число 0, так как 45 не больше 45
if x &gt; y:
  "X больше Y"
elseif y &gt; x:
  "Y больше X"
else
  "Числа равны"
end
</pre></div>
</li>
<li class="level1"><div class="li"> <code>[выр1] <strong>!</strong> [выр2], [выр1] <strong>&lt;&gt;</strong> [выр2]</code> - операция <strong>не равно</strong>. Верно, если значения рядом стоящих выражений не равны. <pre class="brush: qsp">
! операция сравнения **равно** с явным указанием оператора перед ней:
*pl 6+12 ! 6*3 &amp; ! 6+12 = 6*3 -&gt; 18=18 -&gt; на экране мы увидим число 0, что означает, что значения выражений не равны
*pl 226 ! 15*15 &amp; ! 226 = 15*15 -&gt; 226=225 -&gt; на экране увидим **1**, так как **226** не равно **225**.
! операция сравнения **равно** с неявным оператором
*pl 'ab'+'cd' &lt;&gt; 'abc'+'d' &amp; ! на экране увидим 0, так как 'ab'+'cd' равно 'abc'+'d'
*pl 13*9 &lt;&gt; 19*3 &amp; ! на экране увидим 1, так как 13*9 равно 19*3
! операция сравнения в условии
if x &lt;&gt; y:
  *pl "Числа не равны"
else
  *pl "Числа равны"
end
</pre> <strong>Примечание.</strong> Во избежание путаницы с оператором комментария <strong><code>!</code></strong> лучше не использовать для записи операции <strong>не равно</strong> восклицательный знак.</div>
</li>
<li class="level1"><div class="li"> <code>[выр1] <strong>&lt;=</strong> [выр2], [выр1] <strong>=&lt;</strong> [выр2]</code> - операция <strong>меньше либо равно</strong>. Верно, если значение выражения слева меньше или равно значению выражения справа. <pre class="brush: qsp">
*pl 37&lt;=56 &amp; ! на экране будет число 1, так как 37 меньше 56 
*pl 45&lt;=23 &amp; ! на экране будет число 0, так как 45 не меньше и не равно 23
*pl 45&lt;=45 &amp; ! на экране будет число 1, так как 45 равно 45
if x &lt;= y:
  "X меньше либо равно Y"
else
  "Y меньше X"
end
</pre> <strong>Примечание.</strong> Запись <code>=&lt;</code> редко применяется в других языках программирования, поэтому рекомендуем не привыкать к её использованию, хотя в <strong>QSP</strong> это ошибкой не будет.</div>
</li>
<li class="level1"><div class="li"> <code>[выр1] <strong>&gt;=</strong> [выр2], [выр1] <strong>=&gt;</strong> [выр2]</code> - операция <strong>больше либо равно</strong>. Верно, если значение выражения слева больше или равно значению выражения справа. <pre class="brush: qsp">
*pl 37&gt;=56 &amp; ! на экране будет число 0, так как 37 не больше и не равно 56 
*pl 45&gt;=23 &amp; ! на экране будет число 1, так как 45 больше 23
*pl 45&gt;=45 &amp; ! на экране будет число 1, так как 45 равно 45
if x &gt;= y:
  "X больше либо равно Y"
else
  "Y больше X"
end
</pre> <strong>Примечание.</strong> Запись <code><strong>=&gt;</strong></code> редко применяется в других языках программирования, поэтому рекомендуем не привыкать к её использованию, хотя в <strong>QSP</strong> это ошибкой не будет.</div>
</li>
</ul>
</div>
<h3 class="sectionedit7" id="logicheskie_operacii">Логические операции</h3>
<div class="level3">
<ul>
<li class="level1"><div class="li"> <code><strong>OBJ</strong> [$выр]</code> - операция проверки наличия предмета в <strong>Инвентаре</strong>. Верно, если в <strong>Окне предметов</strong> есть предмет с названием <code>[$выр]</code>. <pre class="brush: qsp">
addobj "Отвёртка"
*pl obj "Отвёртка" &amp; ! на экране будет число 1, так как предмет **Отвёртка** есть в окне предметов 
*pl obj "Апельсин" &amp;! на экране будет число 0, так как предмета **Апельсин** нет в окне предметов
if obj "Отвёртка": 
  *pl "У вас есть отвёртка."
else 
  *pl "У вас нет отвёртки."
end
</pre></div>
</li>
<li class="level1"><div class="li"> <code id="operator_LOC"><strong>LOC</strong> [$выр]</code> - операция проверки наличия локации в игре. Верно, если в игре есть локация с названием <code>[$выр]</code>. <pre class="brush: qsp">
! в игре создана локация "Густая чаща"
*pl loc "Густая чаща" &amp; ! на экране мы увидим число 1
if loc "Дом": 
  *pl "Вы можете войти в дом."
else 
  *pl "Вы не можете войти в дом."
end
</pre></div>
</li>
<li class="level1"><div class="li"> <code id="operator_NO"><strong>NO</strong> [$выр]</code> - операция отрицания, логическое отрицание, или логическая инверсия. Если <code>[#выр]</code> верно, операция возвращает <strong>0</strong>, а если <code>[#выр]</code> не верно, операция возвращает <strong>1</strong>. Примеры: <pre class="brush: qsp">
*pl no 1 &amp; ! на экране увидим 0, так как 1 соответвует верному выражению 
*pl no 7 &amp; ! на экране увидим 0, так как 7 соответвует верному выражению
*pl no 0 &amp; ! на экране увидим 1, так как 0 соответствует неверному выражению
addobj "Отвёртка"
if no obj "Отвёртка":
  "У вас нет отвёртки."
else
  "У вас есть отвёртка."
end
</pre></div>
</li>
<li class="level1"><div class="li"> <code id="operator_OR">[#выр1] OR [#выр2]</code> - операция логического "или". Всё выражение верно, если хотя бы одна из его частей верна: <code>[#выр1]</code> или <code>[#выр2]</code>. Примеры: <pre class="brush: qsp">
*pl 1 or 1 &amp; ! на экране увидим 1, так как обе части выражения равны 1 
*pl 1 or 0 &amp; ! на экране увидим 1, так как левая часть равна 1 
*pl 0 or 1 &amp; ! на экране увидим 1, так как правая часть равна 1 
*pl 0 or 0 &amp; ! на экране увидим 0, так как обе части выражения равны 0

! обе части выражения верны, значит и всё выражение верно:
(2=2) or (3&lt;&gt;2) &amp; ! выражение вернёт 1 (правда)
! одна часть выражения верна, значит всё выражение верно:
(2&lt;&gt;2) or (3&lt;&gt;2) &amp; ! выражение вернёт 1 (правда)
! обе части выражения не верны, значит и всё выражение не верно:
(2&lt;&gt;2) or (3=2) &amp; ! выражение вернёт 0 (ложь)
</pre> Если <code>[#выр1]</code> верно, значение <code>[#выр2]</code> не вычисляется.</div>
</li>
<li class="level1"><div class="li"> <code id="operator_AND">[#выр1] <strong>AND</strong> [#выр2]</code> - операция побитового "и". Всё выражение верно, только если обе его части верны: и <code>[#выр1]</code>, и <code>[#выр2]</code>. Примеры: <pre class="brush: qsp">
*pl 1 and 1 &amp; ! на экране увидим 1, так как обе части выражения равны 1 
*pl 1 and 0 &amp; ! на экране увидим 0, так как только левая часть равна 1 
*pl 0 and 1 &amp; ! на экране увидим 0, так как только правая часть равна 1 
*pl 0 and 0 &amp; ! на экране увидим 0, так как обе части выражения равны 0

! обе части выражения верны, значит и всё выражение верно:
(2=2) and (3&lt;&gt;2) &amp; ! выражение вернёт 1 (правда)
! одна часть выражения не верна, значит всё выражение неверно:
(2&lt;&gt;2) and (3&lt;&gt;2) &amp; ! выражение вернёт 0 (ложь)
! обе части выражения не верны, значит и всё выражение не верно:
(2&lt;&gt;2) and (3=2) &amp; ! выражение вернёт 0 (ложь)
</pre> Если <code>[#выр1]</code> не верно, значение <code>[#выр2]</code> не вычисляется.</div>
</li>
</ul>
</div>
<h3 class="sectionedit8" id="operacii_so_strokami">Операции со строками</h3>
<div class="level3">
<p>
Операции сравнения строк, а так же функции для работы со строками описаны в разделе <a class="wikilink1" href="help_strings.htm" title="help:strings">Строки</a>.
</p>
<ul>
<li class="level1"><div class="li"> <code>([$выр1] &amp; [$выр2])</code> - операция объединения строковых выражений (конкатенация). Не путайте с символом перечисления команд. Примеры: <pre class="brush: qsp">
! в данном случае на экран будут последовательно выведены строки "26" и "27"
"26" &amp; "27"
! в данном случае на экран будет выведена строка "2627"
("26" &amp; "27")
</pre> Во избежание путаницы, для объединения строк используйте операцию <code>+</code>, она работает точно так же. При попытке конкатенации двух числовых значений они преобразуются в строку.</div>
</li>
<li class="level1"><div class="li"> <code>[$выр1] + [$выр2]</code> - операция объединения строковых выражений. Примеры: <pre class="brush: qsp">
! в данном случае на экран будет выведена строка "2627"
"26" + "27"
</pre></div>
</li>
</ul>
</div>
<h3 class="sectionedit9" id="operacii_s_kortezhami">Операции с кортежами</h3>
<div class="level3">
<p>
Другие операции и функции для работы с кортежами представлены в разделе <a class="wikilink1" href="help_tuples.htm" title="help:tuples">Кортежи</a>.
</p>
<ul>
<li class="level1"><div class="li"> <code>([%выр1] <strong>&amp;</strong> [%выр2])</code> - операция объединения кортежей (конкатенация). Не путайте с символом перечисления команд. Примеры: <pre class="brush: qsp">
! в данном случае на экран будут последовательно выведены кортежи [26, 27] и [37, 48]
[26, 27] &amp; [37, 48]
! в данном случае на экран будет выведен кортеж [26, 27, 37, 48]
([26, 27] &amp; [37, 48])
</pre></div>
</li>
<li class="level1"><div class="li"> <code>[%выр1] <strong>+</strong> [выр2]</code> - операция увеличения значений кортежа. К каждому элементу кортежа <code>%выр1</code> будет прибавлен элемент <code>выр2</code>. <code>выр2</code> может быть кортежем, тогда каждый элемент <code>%выр1</code> будет сложен с кортежем <code>%выр2</code>. Примеры: <pre class="brush: qsp">
%tuple = [4, 10, 16]
%a = %tuple + 2
! %a будет равно [6, 12, 18]
[4, 10] + ['b', 'x'] &amp; ! [4 + ['b', 'x'], 10 + ['b', 'x']] ! [['4b','4x'], ['10b','10x']]
</pre></div>
</li>
<li class="level1"><div class="li"> <code>[%выр1] <strong>-</strong> [#выр2]</code> - операция уменьшения значений кортежа. Из каждого элемента кортежа <code>%выр1</code> будет вычтен элемент <code>#выр2</code>. <code>#выр2</code> может быть только числом. Все остальные варианты приведут к ошибке о несоответствии типов данных. Примеры: <pre class="brush: qsp">
%tuple = [4, 10, 16]
%a = %tuple - 2
! %a будет равно [2, 8, 14]
[4, 10] - ['b', 'x'] &amp; ! ошибка о несоответствии типов данных
</pre></div>
</li>
<li class="level1"><div class="li"> <code>[%выр1] <strong>*</strong> [#выр2]</code> - операция увеличения значений кортежа. Каждый элемент кортежа <code>%выр1</code> будет умножен на значение элемента <code>#выр2</code>. <code>#выр2</code> может быть только числом. Все остальные варианты приведут к ошибке о несоответствии типов данных. Примеры: <pre class="brush: qsp">
%tuple = [4, 10, 16]
%a = %tuple * 2
! %a будет равно [8, 20, 32]
[4, 10] * 'b' &amp; ! ошибка о несоответствии типов данных
</pre></div>
</li>
<li class="level1"><div class="li"> <code>[%выр1] <strong>/</strong> [#выр2]</code> - операция сокращения значений кортежа. Каждый элемент кортежа <code>%выр1</code> будет поделён на значение элемента <code>#выр2</code>. <code>#выр2</code> может быть только числом. Все остальные варианты приведут к ошибке о несоответствии типов данных. Примеры: <pre class="brush: qsp">
%tuple = [4, 10, 16]
%a = %tuple / 2
! %a будет равно [2, 5, 8]
[4, 10] / 'b' &amp; ! ошибка о несоответствии типов данных
</pre></div>
</li>
</ul>
</div>
<h3 class="sectionedit10" id="operacii_s_prisvaivaniem">Операции с присваиванием</h3>
<div class="level3">
<p>
Помимо обыкновенной <a class="wikilink1" href="help_variables.htm" title="help:variables">операции присваивания</a> в <strong>QSP</strong> существуют так же совмещённые математические операции с присваиванием.
</p>
<ul>
<li class="level1"><div class="li"> <code>+=</code> — операция "сложение с присваиванием", сочетающая в себе операции присваивания и сложения. Прибавляет к текущему значению переменной указанное значение. Общая запись: <pre class="brush: qsp">
имя_переменной += [выражение]
</pre> Эквивалентно конструкции: <pre class="brush: qsp">
имя_переменной = имя имя_переменной + [выражение]
</pre> Пример: <pre class="brush: qsp">
! мы заменяем две операции: присвоения и сложения
warrior = warrior+15
! на одну (действие аналогично)
warrior += 15
</pre> Примечание: данную операцию можно использовать и для склейки строк. При этом строка "приклеивается в конец уже существующей строки": <pre class="brush: qsp">
$text = 'Вечное слово в остывшей'
$text += ' золе...'
</pre></div>
</li>
<li class="level1"><div class="li"> <code>-=</code> — операция "вычитание с присваиванием", сочетающая в себе операции присваивания и вычитания. Вычитает из текущего значения переменной указанное значение. Общая запись: <pre class="brush: qsp">
имя_переменной -= [#выражение]
</pre> Эквивалентно конструкции: <pre class="brush: qsp">
имя_переменной = имя имя_переменной - [#выражение]
</pre> Пример: <pre class="brush: qsp">
! мы заменяем две операции: присвоения и вычитания
warrior = warrior - 15
! на одну (действие аналогично)
warrior -= 15
</pre></div>
</li>
<li class="level1"><div class="li"> <code>/=</code> — операция "деление с присваиванием", сочетающая в себе операции присваивания и деления. Делит текущее значение переменной на указанное значение. Общая запись: <pre class="brush: qsp">
имя_переменной /= [#выражение]
</pre> Эквивалентно конструкции: <pre class="brush: qsp">
имя_переменной = имя имя_переменной / [#выражение]
</pre> Пример: <pre class="brush: qsp">
! мы заменяем две операции: присвоения и деления
warrior = warrior / 2
! на одну (действие аналогично)
warrior /= 2
</pre></div>
</li>
<li class="level1"><div class="li"> <code>*=</code> — операция "умножение с присваиванием", сочетающая в себе операции присваивания и умножения. Умножает текущее значение переменной на указанное значение. Общая запись: <pre class="brush: qsp">
имя_переменной *= [#выражение]
</pre> Эквивалентно конструкции: <pre class="brush: qsp">
имя_переменной = имя имя_переменной * [#выражение]
</pre> Пример: <pre class="brush: qsp">
! мы заменяем две операции: присвоения и умножения
warrior = warrior * 2
! на одну (действие аналогично)
warrior *= 2
</pre></div>
</li>
</ul>
<p>
Операции с присваиванием применимы и к кортежам. В этом случае кортежи изменяются по такому же принципу, как в операциях <code>+</code>, <code>-</code>, <code>/</code>, <code>*</code>.
</p>
</div>
<h3 class="sectionedit11" id="drugie_primery">Другие примеры</h3>
<div class="level3">
<p>
</p><pre class="brush: qsp">
x = 5
y = 6
(x ! y) OR (x &lt;&gt; y)  &amp;! Результат 1
x OR y
 &amp;! Результат 1
x AND y
&amp;! Результат 1
y MOD x
 &amp;! 6/5 -&gt; остаток 1 Результат 1
OBJ 'стул'    &amp;! Если в инвентаре есть предмет 'стул', то результат 1, если нет, то 0
LOC 'дом'    &amp;! Если в игре есть локация 'дом', то результат 1, если нет, то 0
res = x*y + y*-x/2  &amp;! (5*6) + (6*(-5)/2)=15  -&gt; в res запишется число 15
res = NO x = y    &amp;! NO 5 = 6 -&gt; NO 0 -&gt; в res запишется число 1
</pre>
<p>
<a class="wikilink1" href="help_coding.htm" title="help:coding">Вперёд: Программный код</a>
</p>
</div>

<!-- wikipage stop -->
</div></body>
</html>