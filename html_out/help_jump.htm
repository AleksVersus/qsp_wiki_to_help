<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//RU">
<html lang="ru">
<head>
<meta charset="utf-8"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<title>Переходы внутри локации [Документация QSP]</title>
<link href="default.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div class="page group">
<!-- wikipage start -->
<p>
<a class="wikilink1" href="help_organizing.htm" title="help:organizing">Назад: Пользовательские функции и процедуры</a>
</p>
<h1 class="sectionedit1" id="perexody_vnutri_lokacii">Переходы внутри локации</h1>
<div class="level1">
<p>
Иногда нам требуется пропустить выполнение определённого участка кода на локации, или вернуться к выполнению уже выполненного участка кода. Для таких случаев в QSP предусмотрен механизм переходов по локальным меткам.
</p>
<p>
В общем виде метки выглядят так:
</p>
<p>
</p><pre class="brush: qsp">
:[название метки]
</pre>
<p>
, где <code>[название метки]</code> — теоретически любое сочетание символов, однако на практике желательно использовать лишь буквы, цифры, символы подчёркивания и пробелы. Перед двоеточием могут стоять символы пробелов и табуляции в любом количестве. Так же игнорируются прилегающие к названию метки символы пробелов и табуляций (однако ставить их не рекомендуется для удобства чтения кода).
</p>
<p>
Иными словами, чтобы поставить метку, вам нужно на отдельной строке поставить двоеточие и после двоеточия написать названия метки.
</p>
<p>
</p><pre class="brush: qsp">
! пример метки
:cycle_end
</pre>
<p>
После названия метки можно поставить <code>&amp;</code> и написать какие-нибудь операторы, однако делать так не рекомендуется.
</p>
<p>
</p><pre class="brush: qsp">
! допустимо, но не рекомендуется
:метка &amp; *pl "Строка текста"
</pre>
<p>
Метки не должны повторяться внутри отдельного блока кода. Если внутри блока кода будут стоять одинаковые метки, плеер будет работать только с самой первой меткой, все остальные повторяющиеся метки он проигнорирует.
</p>
<p>
Названия меток не чувствительны к регистру. То есть метки с названиями "конец" и "КОНЕЦ" — это повторяющиеся метки.
</p>
<p>
Метки локальны для отдельных блоков кода. То есть вы можете использовать одинаковые метки в разных блоках кода; например, на разных локациях.
</p>
<p>
Отдельными блоками кода считаются:
</p>
<ul>
<li class="level1"><div class="li"> Код "Выполнить при посещении" любой локации. Каждая локация - это отдельный блок кода.</div>
</li>
<li class="level1"><div class="li"> Код действия, даже если действие добавлено с помощью оператора <code>ACT</code>.</div>
</li>
<li class="level1"><div class="li"> Код в html-ссылке (см. подраздел "Код в гиперссылках" раздела <strong><a class="wikilink1" href="help_html.htm" title="help:html">HTML</a></strong>).</div>
</li>
<li class="level1"><div class="li"> Код <code>DYNAMIC</code>/<code>DYNEVAL</code></div>
</li>
</ul>
<p>
Для перемещения ("прыжка") к меткам используется оператор <code>JUMP</code>:
</p>
<p>
<code>JUMP [$метка]</code> - переход в текущем блоке кода на метку с названием <code>[$метка]</code>.
</p>
<p>
Пример:
</p>
<p>
</p><pre class="brush: qsp">
jump 'КонеЦ'
p 'Это сообщение не будет выведено'
:конец
p 'А это сообщение пользователь увидит'
</pre>
<p>
<strong>Обратите внимание!</strong> Код действия, добавленного с помощью оператора <code>ACT</code>, является отдельным блоком кода, только когда мы нажимаем на действие. Из локации, на которой размещено создаваемое с помощью оператора <code>ACT</code> действие, мы по прежнему можем "прыгнуть" на метку внутри этого действия.
</p>
<p>
Пример:
</p>
<p>
</p><pre class="brush: qsp">
:метка_на_локации
jump 'метка_в_действии' &amp; ! отсюда мы можем прыгнуть в код действия

act "Действие":
    ! а из действия мы не можем прыгнуть на локацию
    jump 'метка_на_локации'
    :метка_в_действии
end
</pre>
</div>
<h2 class="sectionedit2" id="cikly">Циклы</h2>
<div class="level2">
<p>
В плеерах с версией библиотеки ниже 5.8.0 с помощью меток были организованы циклы. Сейчас эта практика устарела, потому что есть специальный оператор <code>LOOP</code>, предназначенный для создания циклов. Тем не менее в старых играх вы можете столкнуться с подобными конструкциями, поэтому здесь мы приводим примеры таких устаревших циклов, и примеры новых циклов, которые следует использовать.
</p>
<p>
Устаревший цикл для вывода чисел с 1 по 9:
</p>
<p>
</p><pre class="brush: qsp">
s=0
:loop
if s&lt;9:
    s=s+1
    pl s
    jump 'loop'
end
p 'Всё!'
</pre>
<p>
Тот же цикл с использованием оператора <code>LOOP</code>:
</p>
<p>
</p><pre class="brush: qsp">
loop s=0 while s&lt;9:
    s+=1
    pl s
end
p 'Всё!'
</pre>
<p>
Устаревший двойной цикл с одной меткой:
</p>
<p>
</p><pre class="brush: qsp">
:loop
if y&lt;y0:
    if x&lt;x0:
        ! тело цикла, код
        x=x+1
        jump 'loop'
    end
    y=y+1
    x=0
    jump 'loop'
end
</pre>
<p>
Тот же двойной цикл с оператором <code>LOOP</code>:
</p>
<p>
</p><pre class="brush: qsp">
loop y=0 while y&lt;y0 step y+=1:
    loop x=0 while x&lt;x0 step x+=1:
        ! тело цикла, код
    end
end
</pre>
<p>
Несмотря на то, что метки больше не используются для написания циклов, они могут быть очень полезны, если вам нужно досрочно прервать выполнение цикла. Например, вот цикл, проверяющий, присутствуют ли в двух массивах <code>$a</code> и <code>$b</code> одинаковые элементы:
</p>
<p>
</p><pre class="brush: qsp">
loop local i,size=0,arrsize('$a') while i&lt;size step i+=1:
    if arrpos('$b',$a[i])&lt;&gt;-1:
        *pl 'В массивах есть одинаковые элементы'
        jump 'cycle_end' &amp; ! ранний выход из цикла
    end
end
*pl 'В массивах нет одинаковых элементов'
:cycle_end
</pre>
<p>
<a class="wikilink1" href="help_service_locations.htm" title="help:service_locations">Вперёд: Служебные локации</a>
</p>
</div>

<!-- wikipage stop -->
</div></body>
</html>